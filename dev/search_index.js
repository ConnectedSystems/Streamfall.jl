var documenterSearchIndex = {"docs":
[{"location":"API/nodes/EnsembleNode/#GR4J","page":"GR4J","title":"GR4J","text":"","category":"section"},{"location":"API/nodes/EnsembleNode/","page":"GR4J","title":"GR4J","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"EnsembleNode.jl\"]","category":"page"},{"location":"API/nodes/EnsembleNode/#Streamfall.apply_bias_correction-Union{Tuple{T}, Tuple{WeightedEnsembleNode, Climate, Vector{T}}} where T<:Real","page":"GR4J","title":"Streamfall.apply_bias_correction","text":"apply_bias_correction(\n    ensemble::WeightedEnsembleNode,\n    climate::Climate,\n    obs::Vector{T};\n    period=monthday\n) where {T<:Real}\n\nApply bias correction using the median error for a given period (monthday)\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/EnsembleNode/#Streamfall.apply_temporal_correction-Union{Tuple{T}, Tuple{WeightedEnsembleNode, Climate, Vector{T}}} where T<:Real","page":"GR4J","title":"Streamfall.apply_temporal_correction","text":"apply_temporal_correction(\n    ensemble::WeightedEnsembleNode,\n    climate::Climate,\n    obs::Vector{T}\n) where {T<:Real}\n\nCorrect for model bias using median error.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/EnsembleNode/#Streamfall.calibrate!-Union{Tuple{C}, Tuple{WeightedEnsembleNode, Climate, DataFrames.DataFrame, Union{AbstractDict{String, C}, C}}} where C<:Function","page":"GR4J","title":"Streamfall.calibrate!","text":"calibrate!(ensemble::WeightedEnsembleNode, climate::Climate, calib_data::Union{AbstractArray,DataFrame}, metric::Union{F,AbstractDict{String,F}}; kwargs...) where {F}\n\nCalibrate individual the ensemble weights assuming the component models are pre-calibrated.\n\nArguments\n\nensemble: WeightedEnsembleNode containing multiple model instances\nclimate: Climate data for simulation\ncalib_data: Calibration data, either as an array or DataFrame with node names as columns\nmetric: Optimization metric function or Dict mapping node names to metrics\nkwargs: Additional arguments passed to BlackBoxOptim\n\nReturns\n\nTuple of (optimizationresult, optimizationsetup) from weights calibration\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/EnsembleNode/#Streamfall.calibrate_instances!-Union{Tuple{F}, Tuple{WeightedEnsembleNode, Climate, DataFrames.DataFrame, Union{AbstractDict{String, F}, F}}} where F","page":"GR4J","title":"Streamfall.calibrate_instances!","text":"calibrate_instances!(ensemble::WeightedEnsembleNode, climate::Climate, calib_data::Union{AbstractArray,DataFrame}, metric::Union{F,AbstractDict{String,F}}; kwargs...) where {F}\n\nCalibrate individual model instances and then the ensemble weights.\n\nArguments\n\nensemble: WeightedEnsembleNode containing multiple model instances\nclimate: Climate data for simulation\ncalib_data: Calibration data, either as an array or DataFrame with node names as columns\nmetric: Optimization metric function or Dict mapping node names to metrics\nkwargs: Additional arguments passed to BlackBoxOptim\n\nReturns\n\nTuple of (optimizationresult, optimizationsetup) from weights calibration\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#GR4J","page":"GR4J","title":"GR4J","text":"","category":"section"},{"location":"API/nodes/GR4J/","page":"GR4J","title":"GR4J","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Nodes/GR4J/GR4JNode.jl\"]","category":"page"},{"location":"API/nodes/GR4J/#Streamfall.reset!-Tuple{GR4JNode}","page":"GR4J","title":"Streamfall.reset!","text":"reset!(node::GR4JNode)::Nothing\n\nReset node. Clears all states back to their initial values.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#Streamfall.run_gr4j-Union{Tuple{F}, Tuple{F, F, F, F, F, F, F, Vararg{Vector{F}, 4}}} where F<:Float64","page":"GR4J","title":"Streamfall.run_gr4j","text":"run_gr4j(\n    P::F, E::F, X1::F, X2::F, X3::F, X4::F, area::F,\n    UH1::Vector{Float64}, UH2::Vector{Float64},\n    uh1_ordinates::Vector{Float64}, uh2_ordinates::Vector{Float64};\n    p_store=0.0, r_store=0.0\n)::Tuple where {F<:Float64}\n\nGenerated simulated streamflow with GR4J for given rainfall and potential evaporation.\n\nParameters\n\nP : Catchment average rainfall\nE : Catchment average potential evapotranspiration\nX1 : Maximum capacity of production store (in mm; > 0)\nX2 : Groundwater exchange coefficient (in mm; value < and > 0 possible)\nX3 : Maximum capacity of routing store (in mm; > 0)\nX4 : Time base of the unit hydrograph (in days, > 0.5)\narea : Catchment area\nUH1 : Quickflow store\nUH2 : Baseflow store\nuh1_ordinates : The proportion of rainfall converted to quickflow for each timestep\nuh2_ordinates : The proportion of rainfall converted to slowflow for each timestep\np_store : Initial production store\nr_store : Initial state store\n\nReturns\n\nTuple of:\n\nSimulated outflow [ML/day]\nintermediate states:\np_store (initial production / percolation)\nr_store (initial state)\nUH1 (Quickflow)\nUH2 (Slowflow)\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#Streamfall.run_timestep!-Tuple{GR4JNode, Climate, Int64}","page":"GR4J","title":"Streamfall.run_timestep!","text":"run_timestep!(\n    node::GR4JNode, climate::Climate, timestep::Int;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)\nrun_timestep!(\n    node::GR4JNode, rain::Float64, et::Float64, ts::Int64;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)\n\nRun given GR4J node for a time step.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#Streamfall.s_curve-Union{Tuple{F}, Tuple{F, F}} where F<:Float64","page":"GR4J","title":"Streamfall.s_curve","text":"s_curve(t::Float64, x4::Float64, uh2::Bool = false)::Float64\n\nDetermine unit hydrograph ordinates.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#Streamfall.update_params!-Tuple{GR4JNode, Vararg{Float64, 4}}","page":"GR4J","title":"Streamfall.update_params!","text":"update_params!(node::GR4JNode, X1::Float64, X2::Float64, X3::Float64, X4::Float64)::Nothing\n\nUpdate parameters for GR4J.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#Streamfall.update_state!-Tuple{GR4JNode, Vararg{Any, 5}}","page":"GR4J","title":"Streamfall.update_state!","text":"update_state!(node::GR4JNode, ps, rs, q, UH1, UH2)::Nothing\nupdate_state!(node::GR4JNode, ts::Int64, ps, rs, q, UH1, UH2)::Nothing\n\nUpdate GR4J node state.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/GR4J/#Streamfall.GR4JNode","page":"GR4J","title":"Streamfall.GR4JNode","text":"GR4J Node\n\nGR4J: modèle du Génie Rural à 4 paramètres Journalier.\n\nA four-parameter model with two stores.\n\nParameters\n\nx1 : maximum capacity of the production store (mm) (> 0)\nx2 : groundwater exchange coefficient (mm) (value < and > 0 possible)\nx3 : one day ahead maximum capacity of the routing store (mm, > 0)\nx4 : time base of unit hydrograph UH1 (days, > 0.5)\n\nReferences\n\nPerrin, C., Michel, C., Andréassian, V., 2003.  Improvement of a parsimonious model for streamflow simulation.  Journal of Hydrology 279, 275-289.  https://doi.org/10.1016/S0022-1694(03)00225-7\nMacDonald, A. 2014.  Python GR4J  https://github.com/amacd31/gr4j\n\n\n\n\n\n","category":"type"},{"location":"examples/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/examples/","page":"Examples","title":"Examples","text":"The examples provide a more \"hands-on\" guide to using Streamfall.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/#Weighted-Ensemble-Modeling","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"","category":"section"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"Streamfall supports ensemble modeling using individual instances of rainfall-runoff models as the ensemble constituents. The default ensemble is a normalized weighted sum.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"The usual setup process is shown here, detailed in previous sections of this guide.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"using StatsPlots\nusing CSV, DataFrames\nusing Statistics\nusing Streamfall\n\ndata_dir = joinpath(\n    dirname(dirname(pathof(Streamfall))),\n    \"test/data\"\n)\n\n# Historic flows and dam level data\nobs_data = CSV.read(\n    joinpath(data_dir, \"cotter/climate/CAMELS-AUS_410730.csv\"),\n    DataFrame;\n    comment=\"#\"\n)\n\nQo = extract_flow(obs_data, \"410730\")\nclimate = extract_climate(obs_data)","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"Specific node representations can then be created, each representing the same sub-catchment. A stream network is not considered for this demonstration.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"# Create one instance each of IHACRES_CMD and GR4J\nihacres_node = create_node(IHACRESBilinearNode, \"410730\", 129.2)\ngr4j_node = create_node(GR4JNode, \"410730\", 129.2)\n\n# Create a weighted ensemble with equal weights\n# The default behavior is to combine component predictions with a normalized weighted sum.\nensemble = create_node(WeightedEnsembleNode, [ihacres_node, gr4j_node], [0.5, 0.5])","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"In previous examples, the calibrate!() method was used to calibrate nodes to available data. For WeightedEnsembleNodes, calibrate!() optimizes just the weights to allow for pre-calibrated instances to be provided for use in an ensemble. This may be useful if it is desired for the component models to be calibrated according to different criteria and objective functions.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"A separate calibrate_instances!() method is available to calibrate individual component models (and the weights used).","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"# The default behaviour for WeightedEnsembleNodes are to calibrate just the weights.\n# res, opt = calibrate!(ensemble, climate, Qo, (obs, sim) -> 1.0 .- Streamfall.NmKGE(obs, sim); MaxTime=180)\n\n# Here, the component models are uncalibrated so we calibrate these and the weights.\nres, opt = calibrate_instances!(ensemble, climate, Qo, (obs, sim) -> 1.0 .- Streamfall.NmKGE(obs, sim); MaxTime=180)","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"Running the calibrated models directly, the amount of improvement to model performance can be assessed. Here, a 1-year burn in period is used.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"run_node!(ihacres_node, climate)\nrun_node!(gr4j_node, climate)\nrun_node!(ensemble, climate)\n\nburn_in = 365\nburn_dates = timesteps(climate)[burn_in:end]\nburn_obs = Qo[burn_in:end, \"410730\"]\n\nihacres_qp = quickplot(burn_obs, ihacres_node.outflow[burn_in:end], climate; label=\"IHACRES\", log=true)\ngr4j_qp = quickplot(burn_obs, gr4j_node.outflow[burn_in:end], climate; label=\"GR4J\", log=true)\nensemble_qp = quickplot(burn_obs, ensemble.outflow[burn_in:end], climate; label=\"Weighted Ensemble\", log=true)\n\nplot(ihacres_qp, gr4j_qp, ensemble_qp; layout=(3, 1), size=(800, 1200))","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"Below a small improvement to model performance based on the modified Kling-Gupta Efficiency score can be seen. Comparing the Q-Q plots, IHACRES had a tendency to underestimate low flows and high flows, whereas GR4J had a tendency to overestimate low flows.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"The weighted ensemble combined characteristics of both, with a tendency to overestimate low flows as with GR4J.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"(Image: )","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"Comparing the temporal cross section:","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"ihacres_xs = temporal_cross_section(burn_dates, burn_obs, ihacres_node.outflow[burn_in:end]; title=\"IHACRES\", yscale=:log10)\ngr4j_xs = temporal_cross_section(burn_dates, burn_obs, gr4j_node.outflow[burn_in:end]; title=\"GR4J\", yscale=:log10)\nensemble_xs = temporal_cross_section(burn_dates, burn_obs, ensemble.outflow[burn_in:end]; title=\"Weighted Ensemble (IHACRES-GR4J)\", yscale=:log10)\n\nplot(ihacres_xs, gr4j_xs, ensemble_xs; layout=(3, 1), size=(800, 1200))","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"A reduction in the median error can be seen with extreme errors reduced somewhat.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"(Image: )","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"The median error can then be applied to modelled streamflow (on a month-day basis) as a form of bias correction.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"q_star = Streamfall.apply_temporal_correction(ensemble, climate, Qo[:, \"410730\"])\n\nbc_ensemble_qp = quickplot(burn_obs, q_star[burn_in:end], climate; label=\"Bias Corrected Ensemble\", log=true)\n\nbias_corrected_xs = temporal_cross_section(\n    burn_dates,\n    burn_obs,\n    q_star[burn_in:end];\n    title=\"Bias Corrected Ensemble\",\n    yscale=:log10\n)\n\nplot(bc_ensemble_qp, bias_corrected_xs; layout=(2,1), size=(800, 800))","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"While the median error has increased, its variance has reduced significantly. At the same time, performance at the 75 and 95% CI remain steady relative to the original weighted ensemble results.","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"(Image: )","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"This ensemble approach may be improved further by:","category":"page"},{"location":"examples/ensembles/weighted_ensembles/","page":"Weighted Ensemble Modeling","title":"Weighted Ensemble Modeling","text":"Using a rolling window to smooth ensemble predictions\nDefining a custom objective function to target specific conditions","category":"page"},{"location":"API/nodes/Node/#Generic-node-methods","page":"Generic node methods","title":"Generic node methods","text":"","category":"section"},{"location":"API/nodes/Node/","page":"Generic node methods","title":"Generic node methods","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Nodes/Node.jl\"]","category":"page"},{"location":"API/nodes/Node/#Streamfall.create_node-Tuple{Type{<:NetworkNode}, String, Float64}","page":"Generic node methods","title":"Streamfall.create_node","text":"create_node(node::Type{<:NetworkNode}, name::String, area::Float64)\n\nCreate node of a given type.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Node/#Streamfall.get_node-Tuple{Streamfall.StreamfallNetwork, String}","page":"Generic node methods","title":"Streamfall.get_node","text":"get_node(sn::StreamfallNetwork, node_name::String)\n\nRetrieve node_id and node property for a specified gauge.\n\nArguments\n\nsn : Streamfall Network\nnode_name : name of node of interest\n\nReturns\n\nTuple, node position id and node object\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Node/#Streamfall.get_node_id-Tuple{MetaGraphs.MetaDiGraph, String}","page":"Generic node methods","title":"Streamfall.get_node_id","text":"get_node_id(mg::MetaDiGraph, node_name::String)::Int64\n\nRetrieve network node_id for a given gauge (by name).\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Node/#Streamfall.param_info-Tuple{NetworkNode}","page":"Generic node methods","title":"Streamfall.param_info","text":"param_info(node::NetworkNode)\n\nGeneric parameter information extractor.\n\nExtracts parameter names, values, and bounds\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Node/#Streamfall.subcatchment_data","page":"Generic node methods","title":"Streamfall.subcatchment_data","text":"subcatchment_data(node::NetworkNode, data::DataFrame)\n\nExtract all data for a given node from a dataframe.\n\n\n\n\n\n","category":"function"},{"location":"examples/evaluation/multisystem_showcase/#A-simple-showcase-of-multi-system-considerations","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"","category":"section"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"This page is a draft.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Here we showcase a two-node network representing a river and a dam downstream.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"The Lower Campaspe catchment - a small semi-arid basin in North-Central Victoria, Australia - is used for the example here.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Figure of catchment","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"As a graph, the network looks like this:","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Figure of two-node network","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"The dam is the primary water store for farmers in the area but is also used for recreational activities (camping, boating, fishing, etc) by local enthusiasts and vacationers. The Campaspe river is also home to a culturally and ecologically significant population of fish. A certain level of flow must be ensured at key times during the year to support and maintain their population levels.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"In this hypothetical study, local stakeholders would like to have an idea of the range of possible dam levels under a range of environmental watering policies, farmer water use, and how this may impact the level of enjoyment by vacationers.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"The possible environmental watering strategies are defined as:","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Implicit watering:   No purposeful releases for environmental demands. Assume natural inflows and agricultural water orders provide sufficient water flow for ecological purposes.\nExplicit watering:   Assume agricultural water orders partially fulfill environmental needs. Water is released as needed to meet any deficit.\nPrioritized watering:   Water for environmental purposes are prioritised and are managed separately from agricultural demands.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"For the purpose of this example, the farm water requirements are given as a volume of daily water releases throughout a growing season; the period of time over which a crop can grow. This figure may be provided by another model in practice. The growing season is assumed to be between X and Y, with the daily water requirements over that period being between X and Y.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"An index value is used to provide indications of the suitability of dam levels for recreational purposes.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"explain how recreational index works","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Another indicator model is used to show how often environmental needs are met.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"explain how the environmental indicator model works","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"An overview of the system under investigation can then be conceptualized like:","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Conceptual figure of the system","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Where water flows into the dam, and water is released to fulfill water needs of the users downstream. Note that \"water users\" as defined here includes the environment itself.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"First, we define a two-node Streamfall Network which represents the river and dam:","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"We can then generate a number of scenarios representing a mix of the management strategies and water demands, as listed above.","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"# Code to generate scenarios","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"# code showing how to run the model(s)","category":"page"},{"location":"examples/evaluation/multisystem_showcase/","page":"A simple showcase of multi-system considerations","title":"A simple showcase of multi-system considerations","text":"Analysis and wrap up...","category":"page"},{"location":"API/nodes/SIMHYD/#SIMHYD","page":"SIMHYD","title":"SIMHYD","text":"","category":"section"},{"location":"API/nodes/SIMHYD/","page":"SIMHYD","title":"SIMHYD","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Nodes/SIMHYD/SIMHYDNode.jl\"]","category":"page"},{"location":"API/nodes/SIMHYD/#Streamfall.reset!-Tuple{SIMHYDNode}","page":"SIMHYD","title":"Streamfall.reset!","text":"reset!(node::SIMHYDNode)::Nothing\n\nReset node. Clears all states back to their initial values.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/SIMHYD/#Streamfall.run_simhyd-Union{Tuple{F}, Tuple{SIMHYDNode, F, F, Int64}} where F<:Float64","page":"SIMHYD","title":"Streamfall.run_simhyd","text":"run_simhyd(node::SIMHYDNode, P::F, ET::F, ts::Int64)::NTuple{6,F} where {F<:Float64}\n\nRun SIMHYD for a single time step with given inputs and state variables.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/SIMHYD/#Streamfall.run_timestep!-Tuple{SIMHYDNode, Climate, Int64}","page":"SIMHYD","title":"Streamfall.run_timestep!","text":"run_timestep!(\n    node::SIMHYDNode, climate::Climate, ts::Int;\n    inflow=nothing, extraction=extraction, exchange=nothing\n)::AbstractFloat\nrun_timestep!(\n    node::SIMHYDNode,\n    rain::F,\n    et::F,\n    ts::Int;\n    inflow=nothing,\n    extraction=nothing,\n    exchange=nothing\n)::F where {F<:AbstractFloat}\n\nRun SIMHYD for a given timestep.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/SIMHYD/#Streamfall.update_params!-Tuple{SIMHYDNode, Vararg{Float64, 9}}","page":"SIMHYD","title":"Streamfall.update_params!","text":"update_params!(\n    node::SIMHYDNode,\n    baseflow_coef::Float64,\n    impervious_threshold::Float64,\n    infiltration_coef::Float64,\n    infiltration_shape::Float64,\n    interflow_coef::Float64,\n    pervious_fraction::Float64,\n    risc::Float64,\n    recharge_coef::Float64,\n    smsc::Float64\n)::Nothing\n\nUpdate model parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/SIMHYD/#Streamfall.SIMHYDNode-Tuple{String, AbstractDict}","page":"SIMHYD","title":"Streamfall.SIMHYDNode","text":"SIMHYDNode(name::String, spec::AbstractDict)::SIMHYDNode\n\nCreate SIMHYD node from spec.\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Climate","page":"Climate","title":"Climate","text":"","category":"section"},{"location":"API/climate/","page":"Climate","title":"Climate","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Climate.jl\"]","category":"page"},{"location":"API/climate/#Streamfall.climate_values-Tuple{NetworkNode, Climate, Int64}","page":"Climate","title":"Streamfall.climate_values","text":"climate_values(node::NetworkNode, climate::Climate, timestep::Int)\n\nExtract climate related data for a given time step.\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Streamfall.climate_values-Tuple{NetworkNode, Climate}","page":"Climate","title":"Streamfall.climate_values","text":"climate_values(node::NetworkNode, climate::Climate)\n\nExtract climate related data.\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Streamfall.extract_climate-Tuple{DataFrames.DataFrame}","page":"Climate","title":"Streamfall.extract_climate","text":"Create a climate dataset of Precipitation (P) and Potential Evapotranspiration (PET). Data for multiple gauges may be defined in a single dataset.\n\nP and PET columns are identified by _P and _PET suffixes by default.\n\nArguments\n\ndata : Observation data\nP_suffix : Suffix used to indicate precipitation (default: \"_P\")\nPET_suffix : Suffix used to indicate Potential Evapotranspiration (default: \"_PET\")\nT_suffix : Suffix used to indicate Temperature (default: \"_PET\")\n\nReturns\n\nClimate\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Streamfall.extract_flow-Tuple{DataFrames.DataFrame, String}","page":"Climate","title":"Streamfall.extract_flow","text":"extract_flow(\n    data::DataFrame, gauge_id::String; suffix::String=\"_Q\"\n)::DataFrame\n\nExtract streamflow data from file.\n\nStreamflow (Q) column is identified the Gauge ID.\n\nFlow data is identified with the suffix _Q by default e.g., (\"000001_Q\")\n\nArguments\n\ndata : Observation data\ngauge_id : Gauge/Node ID\nsuffix : Suffix used to indicate flow data (default: \"_Q\")\n\nReturns\n\nDataFrame of observations for selected gauge.\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Streamfall.rainfall_data-Tuple{NetworkNode, Climate}","page":"Climate","title":"Streamfall.rainfall_data","text":"rainfall_data(node::NetworkNode, climate::Climate)::DataFrame\n\nExtract rainfall data for a given node.\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Streamfall.sim_length-Tuple{Climate}","page":"Climate","title":"Streamfall.sim_length","text":"sim_length(climate::Climate)::Int64\n\nSimulation length is dependent on available climate data.\n\n\n\n\n\n","category":"method"},{"location":"API/climate/#Streamfall.subcatchment_data-Tuple{NetworkNode, Climate}","page":"Climate","title":"Streamfall.subcatchment_data","text":"subcatchment_data(node::NetworkNode, climate::Climate)\n\nExtract all data for a given node from climate object.\n\n\n\n\n\n","category":"method"},{"location":"examples/calibration/calibration_setup/#Calibration-setup","page":"Calibration setup","title":"Calibration setup","text":"","category":"section"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"The calibration examples all rely on the functions shown here.","category":"page"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"List of metrics provided by Streamfall can be found in Included metrics","category":"page"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"The example here assumes the data has been installed or copied locally. Alternatively, download the test/data directory from the project repository and  change the DATA_PATH variable below accordingly.","category":"page"},{"location":"examples/calibration/calibration_setup/#Importing-shared/common-packages","page":"Calibration setup","title":"Importing shared/common packages","text":"","category":"section"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"# Ensure dependent data and packages are available\nusing Statistics, DataFrames, CSV\nusing Distributed, BlackBoxOptim\n\nusing YAML\nusing StatsPlots, GraphPlot\nusing Streamfall","category":"page"},{"location":"examples/calibration/calibration_setup/#Load-network-specification","page":"Calibration setup","title":"Load network specification","text":"","category":"section"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"# Load and generate stream network\nDATA_PATH = joinpath(dirname(dirname(pathof(Streamfall))), \"test/data/campaspe/\")\nnetwork = YAML.load_file(joinpath(DATA_PATH, \"campaspe_network.yml\"))\nsn = create_network(\"Example Network\", network)","category":"page"},{"location":"examples/calibration/calibration_setup/#Loading-historic-data","page":"Calibration setup","title":"Loading historic data","text":"","category":"section"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"# Load climate data\ndate_format = \"YYYY-mm-dd\"\nclimate_data = CSV.read(joinpath(DATA_PATH, \"climate/climate_historic.csv\"),\n                        comment=\"#\",\n                        dateformat=date_format, DataFrame)\n\ndam_level_fn = joinpath(DATA_PATH, \"gauges/406000_historic_levels_for_fit.csv\")\nhist_dam_levels = CSV.read(dam_level_fn, dateformat=date_format, DataFrame)\n\ndam_releases_fn = joinpath(DATA_PATH, \"gauges/406000_historic_outflow.csv\")\nhist_dam_releases = CSV.read(dam_releases_fn, dateformat=date_format, DataFrame)\n\n# Subset to same range\nclimate_data, hist_dam_levels, hist_dam_releases = Streamfall.align_time_frame(climate_data, \n                                                                               hist_dam_levels, \n                                                                               hist_dam_releases)\n\n# Create historic data alias\nhist_data = Dict(\n    \"406000\" => hist_dam_levels[:, \"Dam Level [mAHD]\"]\n)\n\n# Create climate object\nclimate = Climate(climate_data, \"_rain\", \"_evap\")","category":"page"},{"location":"examples/calibration/calibration_setup/#Example-objective-functions","page":"Calibration setup","title":"Example objective functions","text":"","category":"section"},{"location":"examples/calibration/calibration_setup/","page":"Calibration setup","title":"Calibration setup","text":"\"\"\"Calibrate current node.\"\"\"\nfunction obj_func(params, climate, sn, v_id, calib_data::Dict)\n\n    this_node = get_node(sn, v_id)\n    update_params!(this_node, params...)\n\n    # Running next node will run this node\n    Streamfall.run_node!(sn, v_id, climate; extraction=hist_dam_releases)\n\n    n_data = this_node.outflow\n    h_data = calib_data[this_node.node_id]\n\n    # Calculate score (NNSE; 0 to 1)\n    NNSE = Streamfall.NNSE(h_data, n_data)\n\n    # Switch fitness direction as we want to minimize\n    score = 1.0 - NNSE\n\n    # reset to clear stored values\n    reset!(sn)\n\n    return score\nend\n\n\n\"\"\"Example objective function when performance of current node is dependent \non the next node.\n\"\"\"\nfunction obj_func(params, climate, sn, v_id, next_vid, calib_data::Dict)\n\n    this_node = get_node(sn, v_id)\n    update_params!(this_node, params...)\n\n    # Run next node which will run this node\n    next_node = get_node(sn, next_vid)\n    releases = calib_data[\"$(next_node.node_id)_releases\"]\n    Streamfall.run_node!(sn, next_vid, climate; extraction=releases)\n\n    # Alias data as necessary\n    if next_node.node_id == \"406000\"\n        n_data = next_node.level\n        h_data = calib_data[next_node.node_id]\n    elseif this_node.node_id == \"406000\"\n        n_data = this_node.level\n        h_data = calib_data[this_node.node_id]\n    else\n        n_data = this_node.outflow\n        h_data = calib_data[this_node.node_id]\n    end\n\n    NNSE = Streamfall.NNSE(h_data, n_data)\n    score = 1.0 - NNSE\n\n    reset!(sn)\n\n    return score\nend\n\n\n\"\"\"Alternative objective function for example. \n\nThis uses a naive split meta-objective function using the Normalized KGE' method.\n\nSee `metrics` page for details.\n\"\"\"\nfunction alt_obj_func(params, climate, sn, v_id, next_vid, calib_data::Dict)\n    this_node = get_node(sn, v_id)\n    update_params!(this_node, params...)\n\n    # Run next node (which will also run this node)\n    Streamfall.run_node!(sn, next_vid, climate; extraction=hist_dam_releases)\n\n    next_node = get_node(sn, next_vid)\n    # Alias data as necessary\n    if next_node.node_id == \"406000\"\n        n_data = next_node.level\n        h_data = calib_data[next_node.node_id]\n    elseif this_node.node_id == \"406000\"\n        n_data = this_node.level\n        h_data = calib_data[this_node.node_id]\n    else\n        n_data = this_node.outflow\n        h_data = calib_data[this_node.node_id]\n    end\n\n    split_NmKGE = Streamfall.naive_split_metric(h_data, n_data; n_members=365, metric=Streamfall.NmKGE, comb_method=mean)\n    score = 1.0 - split_NmKGE\n\n    reset!(sn)\n\n    return score\nend","category":"page"},{"location":"API/nodes/Dam/#Dam-(Storage-Level)","page":"Dam (Storage Level)","title":"Dam (Storage Level)","text":"","category":"section"},{"location":"API/nodes/Dam/","page":"Dam (Storage Level)","title":"Dam (Storage Level)","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"DamNode.jl\"]","category":"page"},{"location":"API/nodes/Dam/#Streamfall.extract_spec!-Tuple{DamNode, AbstractDict}","page":"Dam (Storage Level)","title":"Streamfall.extract_spec!","text":"extract_spec!(node::DamNode, spec::AbstractDict)::Nothing\n\nExtract dam-specific values.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Dam/#Streamfall.run_node!-Tuple{DamNode, Climate, Int64}","page":"Dam (Storage Level)","title":"Streamfall.run_node!","text":"run_node!(\n    node::DamNode, climate::Climate, ts::Int;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)::Nothing\n\nRun a specific node for a specified time step.\n\nArguments\n\nnode : DamNode\nclimate : Climate dataset\nts : Current time step\ninflow : Time series of inflows from any upstream node.\nextraction : Time series of water orders (expects column of _releases)\nexchange : Time series of groundwater flux\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Dam/#Streamfall.run_node!-Tuple{DamNode, Int64, Vararg{Float64, 6}}","page":"Dam (Storage Level)","title":"Streamfall.run_node!","text":"run_node!(\n    node::DamNode,\n    ts::Int64,\n    rain::Float64,\n    et::Float64,\n    volume::Float64,\n    inflow::Float64,\n    extractions::Float64,\n    gw_flux::Float64\n)\n\nCalculate outflow for the dam node for a single time step.\n\nArguments\n\nnode : DamNode\nrain : rainfall in mm\net : evapotranspiration data in mm\nirrig_ext : irrigation extractions\nextractions : extraction data in ML\ngw_flux : groundwater interaction\n\nReturns\n\nOutflow from dam\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Dam/#Streamfall.update_params!-Tuple{DamNode, Float64}","page":"Dam (Storage Level)","title":"Streamfall.update_params!","text":"update_params!(node::DamNode, storage_coef::Float64)::Nothing\n\nMethod to update DamNode specific parameters.\n\nArguments\n\nnode : DamNode\nstorage_coef : Storage coefficient value\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Dam/#Streamfall.update_volume-NTuple{9, Any}","page":"Dam (Storage Level)","title":"Streamfall.update_volume","text":"update_volume(volume, node_inflow, gamma, rain, evap, area, extractions, discharge, max_store)::Float64\n\nUpdate dam volume for timestep.\n\nArguments\n\nvolume : current water volume in ML\nnode_inflow : inflow from previous node in ML\ngamma : groundwater exchange (positive is gain from gw flow, negative is loss to infiltration)\nrain : rainfall input\nevap : evaporation loss\ninfiltration : infiltration loss\narea : dam surface area in square kilometers\nextractions : water extraction from dam in ML\ndischarge : discharge from dam in ML\nmax_store : maximum dam storage in ML\n\nReturns\n\nvolume of water stored in dam\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/Dam/#Streamfall.DamNode-Tuple{String, AbstractDict}","page":"Dam (Storage Level)","title":"Streamfall.DamNode","text":"DamNode(name::String, spec::AbstractDict)\n\nCreate DamNode from a given specification.\n\n\n\n\n\n","category":"method"},{"location":"examples/network_loading/#Network-Loading","page":"Network Loading","title":"Network Loading","text":"","category":"section"},{"location":"examples/network_loading/","page":"Network Loading","title":"Network Loading","text":"Loading a pre-defined network from a YAML file.","category":"page"},{"location":"examples/network_loading/","page":"Network Loading","title":"Network Loading","text":"using YAML\nusing StatsPlots, GraphPlot\nusing Streamfall\n\nnetwork_file = joinpath(\n    dirname(dirname(pathof(Streamfall))),\n    \"test/data/campaspe/campaspe_network.yml\"\n)\n\nsn = load_network(\"Example Network\", network_file)\n\n# Find all inlets and outlets\ninlets, outlets = find_inlets_and_outlets(sn)\n\n# Show figure of network\nplot_network(sn)","category":"page"},{"location":"API/plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"API/plotting/","page":"Plotting","title":"Plotting","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"plotting.jl\"]","category":"page"},{"location":"API/network/#Network","page":"Network","title":"Network","text":"","category":"section"},{"location":"API/network/","page":"Network","title":"Network","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Network.jl\"]","category":"page"},{"location":"API/network/#Streamfall.area-Tuple{Streamfall.StreamfallNetwork}","page":"Network","title":"Streamfall.area","text":"area(sn::StreamfallNetwork)::Float64\n\nTotal area represented by a network.\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.create_network-Tuple{String, AbstractDict}","page":"Network","title":"Streamfall.create_network","text":"create_network(name::String, network::AbstractDict)::StreamfallNetwork\n\nCreate a StreamNetwork from a YAML-derived specification.\n\nExample\n\njulia> using OrderedCollections\njulia> network_spec = YAML.load_file(\"example_network.yml\"; dicttype=OrderedDict{Any,Any})\njulia> sn = create_network(\"Example Network\", network_spec)\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.create_node-Tuple{MetaGraphs.MetaDiGraph, String, AbstractDict, Int64}","page":"Network","title":"Streamfall.create_node","text":"create_node(mg::MetaDiGraph, node_name::String, details::AbstractDict, nid::Int)\n\nCreate a node specified with given name (if it does not exist).\n\nReturns\n\nthis_id : ID of node (if pre-existing) and\nnid : incremented node id for entire network (equal to this_id if exists)\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.extract_network_spec-Tuple{Streamfall.StreamfallNetwork}","page":"Network","title":"Streamfall.extract_network_spec","text":"extract_network_spec(sn::StreamfallNetwork)\n\nExtract network details\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.find_inlets_and_outlets-Tuple{Streamfall.StreamfallNetwork}","page":"Network","title":"Streamfall.find_inlets_and_outlets","text":"find_inlets_and_outlets(sn::StreamfallNetwork)::Tuple\n\nFind all inlets and outlets in a network.\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.in_or_out-Tuple{Any, Any}","page":"Network","title":"Streamfall.in_or_out","text":"in_or_out(g, v)\n\nDetermine a node's connection\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.inlets-Tuple{Streamfall.StreamfallNetwork, String}","page":"Network","title":"Streamfall.inlets","text":"inlets(sn::StreamfallNetwork, node_name::String)\n\nFind ID(s) of nodes which provides inflows for given node.\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.outlets-Tuple{Streamfall.StreamfallNetwork, String}","page":"Network","title":"Streamfall.outlets","text":"outlets(sn::StreamfallNetwork, node_name::String)\n\nFind ID(s) of node immediately downstream from given node.\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.reset!-Tuple{Streamfall.StreamfallNetwork}","page":"Network","title":"Streamfall.reset!","text":"reset!(sn::StreamfallNetwork)::Nothing\n\nReset a network.\n\n\n\n\n\n","category":"method"},{"location":"API/network/#Streamfall.save_network-Tuple{Streamfall.StreamfallNetwork, String}","page":"Network","title":"Streamfall.save_network","text":"save_network(sn::StreamfallNetwork, fn::String)::Nothing\n\nSave network specification to a YAML file.\n\n\n\n\n\n","category":"method"},{"location":"examples/evaluation/simple_showcase/#A-simple-example","page":"A simple example","title":"A simple example","text":"","category":"section"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"In this example we showcase a two-node network: a gauge providing inflows into a dam.","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"The dam in question is Lake Eppalock, in the Lower Campaspe catchment located in North-Central Victoria, Australia.","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"The map below shows Lake Eppalock, along with relevant gauge locations/data (click the markers on the map to see further gauge details).","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"This example uses the results as detailed in Calibration setup.","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"<iframe style=\"width: 720px; height: 600px; border: none; background-image:url(assets/lake_eppalock.png)\" src=\"https://nationalmap.gov.au/#share=s-kxvHElDvlHdB4D4XslDCT70YHZ3\" allowFullScreen mozAllowFullScreen webkitAllowFullScreen></iframe>","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"\"\"\"\nThis script is run in the `examples` directory.\n\"\"\"\n\nusing CSV, DataFrames, YAML\nusing StatsPlots\nusing Streamfall\n\ndata_dir = joinpath(dirname(dirname(pathof(Streamfall))), \"test/data/campaspe\")\n\n# Load climate data - in this case from a CSV file with data for all nodes.\n# Indicate which columns are precipitation and evaporation data based on partial identifiers\nclimate = Climate(joinpath(data_dir, \"climate/climate.csv\"), \"_rain\", \"_evap\")\n\ncalib_data = CSV.read(\n    joinpath(data_dir, \"gauges/outflow_and_level.csv\"),\n    DataFrame;\n    comment=\"#\"\n)\n\n# Historic extractions from the dam\nextraction_data = CSV.read(joinpath(data_dir, \"gauges/dam_extraction.csv\"), DataFrame; comment=\"#\")\n\n# Load the two-node example network\nsn = load_network(\"Example Network\", joinpath(data_dir, \"two_node_network.yml\"))\n\n# Run the dam node and above\ndam_id, dam_node = sn[\"406000\"]\nrun_node!(sn, dam_id, climate; extraction=extraction_data)\n\n# Get performance metrics\ndam_obs = calib_data[:, \"406000\"]\ndam_sim = dam_node.level\n\nrmse_score = Streamfall.RMSE(dam_obs, dam_sim)\nnnse_score = Streamfall.NNSE(dam_obs, dam_sim)\nnse_score = Streamfall.NSE(dam_obs, dam_sim)\n\nrmse = round(rmse_score, digits=4)\nnnse = round(nnse_score, digits=4)\nnse = round(nse_score, digits=4)\n\n@info \"Scores:\" rmse nnse nse\n\n# Results of model run\nquickplot(dam_obs, dam_sim, climate; label=\"IHACRES\", log=false, burn_in=366)","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"The quickplot() function creates the figure displayed above which shows dam levels on the left (observed and modelled) with a Q-Q plot on the right.","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"(Image: )","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"sim_dates = Streamfall.timesteps(climate)\nStreamfall.temporal_cross_section(sim_dates, calib_data[:, \"406000\"], dam_sim)","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"The above shows a \"cross-section\" of model predictions for each month-day across simulation time. It is useful to gain an understanding on when models may underperform and give a sense of a models predictive uncertainty. The units of the y-axis are the same as for the node (in this case, meters).","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"Ideally, the median error would be a straight line and the confidence intervals would be as thin and consistent as possible for all month-days.","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"Here, we see that while performance is generally good (mean of Median Error is near zero), the model can under-estimate dam levels in late-April to May and displays a tendency to over-estimate dam levels between January and June, relative to other times.","category":"page"},{"location":"examples/evaluation/simple_showcase/","page":"A simple example","title":"A simple example","text":"(Image: )","category":"page"},{"location":"primer/#Primer","page":"Primer","title":"Primer","text":"","category":"section"},{"location":"primer/","page":"Primer","title":"Primer","text":"Streamfall is a stream network modelling framework with integrated systems analysis and modelling in mind. The aim is to simplify the construction of basin-scale hydrology models, itself a constituent of a larger system of systems. The overarching concepts are explained here.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"The motivation for Streamfall is to enable flexible modelling of a hydrological system.\nThis includes:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Representation of catchments with heterogenous combinations of rainfall-runoff models \n(each sub-catchment may be represented by a different hydrological model)\nSupport interaction with other models which may represent groundwater interactions or \nanthropogenic activity (e.g., water extractions)\nHigh performance relative to available implementations in R and Python","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Primary components of the Streamfall framework include:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"The graph representing a network of gauges and the associated model\nData for the basin, including climate data and hydrologic interactions \ndriven by other systems\nThe functions which run the network as a whole and individual nodes","category":"page"},{"location":"primer/#Defining-a-network","page":"Primer","title":"Defining a network","text":"","category":"section"},{"location":"primer/","page":"Primer","title":"Primer","text":"A stream network is defined through a YAML specification file (the \"spec\").","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"A single node network is shown below using a IHACRES model.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"The spec takes the following form:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"# Node name (the Gauge ID is used here)\n410730:\n    # The node type which defines which model is used for this node\n    # In this case, it is the IHACRES with the bilinear formulation of the CMD module\n    node_type: IHACRESBilinearNode\n    area: 130.0  # subcatchment area in km^2 (from BoM)\n\n    # This spec defines a single node system\n    # so it has no nodes upstream (inlets) or downstream (outlets)\n    inlets:\n    outlets:\n\n    # Initial CMD state, CMD > 0 means there is a deficit\n    initial_storage: 0.0\n\n    # Model parameters (in this case, for IHACRES)\n    parameters:\n        d: 200.0     # millimeters\n        d2: 2.0      # multiplier applied to `d`\n        e: 1.0       # ET scaling factor, dimensionless\n        f: 0.8       # multiplier applied to `d` to determine effective rainfall, dimensionless\n        a: 0.9       # quickflow scaling factor\n        b: 0.1       # slowflow scaling factor\n        storage_coef: 2.9  # groundwater interaction factor\n        alpha: 0.95  # effective rainfall scaling factor","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"The spec is then loaded with load_network()","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"# Load network from a spec file, with a human-readable name.\nsn = load_network(\"Gingera Catchment\", \"network.yml\")","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Printing the network displays a summary of the nodes:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"julia> sn\n\nNetwork Name: Gingera Catchment\nRepresented Area: 130.0\n\nNode 1\n--------\nName: 410730 [IHACRESBilinearNode]\nArea: 130.0\n┌──────────────┬───────┬─────────────┬─────────────┐\n│    Parameter │ Value │ Lower Bound │ Upper Bound │\n├──────────────┼───────┼─────────────┼─────────────┤\n│            d │ 200.0 │        10.0 │       550.0 │\n│           d2 │   2.0 │      0.0001 │        10.0 │\n│            e │   1.0 │         0.1 │         1.5 │\n│            f │   0.8 │        0.01 │         3.0 │\n│            a │   0.9 │         0.1 │        10.0 │\n│            b │   0.1 │       0.001 │         0.1 │\n│ storage_coef │   2.9 │     1.0e-10 │        10.0 │\n│        alpha │  0.95 │      1.0e-5 │         1.0 │\n└──────────────┴───────┴─────────────┴─────────────┘","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Each node will be assigned an internal node identifier based on their order and position in the network.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Individual nodes can also be created programmatically:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"# Programmatically create a node (from a spec)\nnew_node = IHACRESBilinearNode(\"410730\", network[\"410730\"])\n\n# Creating the same node manually by specifying model parameters\n# Argument order: node_name, area, d, d2, e, f, a, b, storage_coef, alpha, initial cmd, initial quickflow, initial slowflow, initial gw_store\nnew_node = IHACRESBilinearNode(\"410730\", 130.0, 95.578, 1.743, 1.047, 1.315, 99.134, 0.259, 2.9, 0.785, 100.0, 0.0, 0.0, 0.0)","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Of course, model parameters may not be known in advance.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Streamfall nodes hold parameter information including their usual bounds/ranges.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"These can be examined like so:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"param_names, x0, bounds = param_info(node)","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"where x0 are the current values.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Example calibration approaches are detailed in Example calibration","category":"page"},{"location":"primer/#Required-data","page":"Primer","title":"Required data","text":"","category":"section"},{"location":"primer/","page":"Primer","title":"Primer","text":"All data is expected in DataFrames with the following convention:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"All time series must have a \"Date\" column in YYYY-mm-dd format.\nBy convention, column names follow the pattern: [node_name]_[phenomenon]_[other metadata]\nUnit of measure itself is optionally included in square brackets ([])\nIn-file comments are indicated with a hash (#)","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Data that may be optionally provided include:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"inflow : specifying the incoming volume of water (when running the model for a specific node)\nextractions : additional extractions from the stream\nexchange : additional forcing for groundwater interactions.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"These may be provided as a Dictionary of arrays with the node name as the key.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"More details may be found in the Input data format page.","category":"page"},{"location":"primer/#Climate-data","page":"Primer","title":"Climate data","text":"","category":"section"},{"location":"primer/","page":"Primer","title":"Primer","text":"Climate data is treated as a special case of the above and is required for a scenario to run. Currently the expectation is that two phenomena are provided for each node (one of which is rainfall).","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"In this example case, precipitation and evaporation are provided (marked by identifiers _rain and _evap respectively). Below is an example for a two-node system.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Date, 406214_rain, 406214_evap, 406219_rain, 406219_evap\n1981-01-01, 0.0, 4.8, 0.0, 4.9\n1981-01-02, 0.1, 0.5, 0.1, 3.3\n1981-01-03, 10.5, 5.3, 7.2, 2.3\n1981-01-04, 9.89, 7.9, 6.1, 4.3\n1981-01-05, 0.3, 4.2, 0.2, 6.4\n... snip ...","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"# Load data from CSV\n# Create a climate object, specifying which identifiers to use.\nexample_data_dir = joinpath(dirname(dirname(pathof(Streamfall))), \"test/data\")\nclimate = Climate(\n    joinpath(example_data_dir, \"campaspe/climate/climate.csv\"), \n    \"_rain\", \"_evap\"\n)","category":"page"},{"location":"primer/#Running-a-network-or-node","page":"Primer","title":"Running a network or node","text":"","category":"section"},{"location":"primer/","page":"Primer","title":"Primer","text":"To run an entire basin network, without any dynamic interaction with \"external\" systems:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"run_basin!(sn::StreamfallNetwork, climate::Climate)","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"This will identify the final \"outlet\" of the stream network and recurse upstream to run all nodes.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Individual nodes can also be run:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"# Run up to a point in the stream for all time steps.\n# All nodes upstream will be run as well (but not those downstream)\nnode_id, node = sn[\"406219\"]\nrun_node!(sn, node_id, climate)\n\n# Reset a node (clears stored states)\nreset!(node)\n\n# Run a specific node, and only a specific node, for all time steps\ninflow = ...      # array of inflows for each time step\nextractions = ... # extractions from stream for each time step\ngw_flux = ...     # forced groundwater interactions for each time step\nrun_node!(node, climate; inflow=inflow, extraction=extractions, exchange=gw_flux)","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Another, more direct approach, is to identify all outlets for a given network and call run_node!() for each outlet with relevant climate data for each timestep. All relevant upstream nodes will also be run.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"inlets, outlets = find_inlets_and_outlets(sn)\n\n@info \"Running example stream...\"\ntimesteps = sim_length(climate)\nprep_state!(sn, timesteps)\nfor ts in (1:timesteps)\n    for outlet in outlets\n        run_node!(sn, outlet, climate, ts)\n    end\nend","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"When interactions with other socio-environmental systems are expected, it can become necessary to run each node individually as needed.","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Interactions with these external systems are represented as influencing:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Inflows to a node\nExtraction of water from a stream\nAdditional flux to/from the groundwater system","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"The following pattern can be used in such a context:","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"@info \"Running example stream...\"\nsteps = sim_length(climate)\nprep_state!(sn, steps)\nfor ts in 1:steps\n    # Run external model that provides extraction **in the same units**\n    # This does not have to be a model in Julia, but inter-language interoperability is\n    # outside the scope of this example.\n    extractions = some_water_extraction_model(...)\n\n    # Run a different model which provides groundwater interactions\n    exchange = a_groundwater_model(...)\n\n    for outlet in outlets\n        run_node!(sn, outlet, climate, ts; extraction=extractions, exchange=exchange)\n    end\nend","category":"page"},{"location":"primer/","page":"Primer","title":"Primer","text":"Specific examples can be found in the Examples section.","category":"page"},{"location":"API/nodes/IHACRES/#IHACRES","page":"IHACRES","title":"IHACRES","text":"","category":"section"},{"location":"API/nodes/IHACRES/","page":"IHACRES","title":"IHACRES","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Nodes/IHACRES/IHACRESNode.jl\"]","category":"page"},{"location":"API/nodes/IHACRES/#Streamfall.extract_spec!-Tuple{IHACRESNode, AbstractDict}","page":"IHACRES","title":"Streamfall.extract_spec!","text":"extract_spec!(node::DamNode, spec::AbstractDict)::Nothing\n\nAdditional processing to extract IHACRES-specific details.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/IHACRES/#Streamfall.param_info-Tuple{IHACRESNode}","page":"IHACRES","title":"Streamfall.param_info","text":"param_info(node::IHACRESNode)::Tuple\n\nExtract node parameter names, values, and bounds for IHACRESNode types.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/IHACRES/#Streamfall.reset!-Tuple{IHACRESNode}","page":"IHACRES","title":"Streamfall.reset!","text":"reset!(s_node::IHACRESNode)::Nothing\n\nReset node. Clears all states back to their initial values.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/IHACRES/#Streamfall.run_node_with_temp!","page":"IHACRES","title":"Streamfall.run_node_with_temp!","text":"run_node_with_temp!(\n    s_node::IHACRESBilinearNode,\n    rain::Float64,\n    temp::Float64,\n    inflow::Float64,\n    ext::Float64,\n    gw_exchange::Float64=0.0;\n    current_store=nothing,\n    quick_store=nothing,\n    slow_store=nothing,\n    gw_store=nothing\n)::Tuple{Float64,Float64}\n\nRun node with temperature data to calculate outflow and update state.\n\n\n\n\n\n","category":"function"},{"location":"API/nodes/IHACRES/#Streamfall.run_timestep!-Tuple{IHACRESNode, Climate, Int64}","page":"IHACRES","title":"Streamfall.run_timestep!","text":"run_timestep!(\n    node::IHACRESNode, climate::Climate, timestep::Int64;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)::Float64\n\nRun the given IHACRESBilinearNode for a timestep.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/IHACRES/#Streamfall.update_params!-Union{Tuple{F}, Tuple{IHACRESBilinearNode, Vararg{F, 8}}} where F<:Float64","page":"IHACRES","title":"Streamfall.update_params!","text":"update_params!(\n    node::IHACRESBilinearNode,\n    d::F,\n    d2::F,\n    e::F,\n    f::F,\n    a::F,\n    b::F,\n    s_coef::F,\n    alpha::F\n)::Nothing where {F<:Float64}\n\nUpdate model parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/IHACRES/#Streamfall.IHACRESBilinearNode-Tuple{String, Vararg{Float64, 13}}","page":"IHACRES","title":"Streamfall.IHACRESBilinearNode","text":"IHACRESBilinearNode(name::String, area::Float64, d::Float64, d2::Float64, e::Float64, f::Float64,\n            a::Float64, b::Float64, s_coef::Float64, alpha::Float64,\n            store::Float64, quick::Float64, slow::Float64, gw_store::Float64)\n\nCreate a IHACRES node that adopts the bilinear CMD module.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/HyMod/#HyMod","page":"HyMod","title":"HyMod","text":"","category":"section"},{"location":"API/nodes/HyMod/","page":"HyMod","title":"HyMod","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Nodes/HyMod/HyModNode.jl\"]","category":"page"},{"location":"API/nodes/HyMod/#Streamfall.run_timestep!-Tuple{SimpleHyModNode, Climate, Int64}","page":"HyMod","title":"Streamfall.run_timestep!","text":"run_timestep!(\n    node::SimpleHyModNode, climate::Climate, timestep::Int;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)::Float64\n\nRun given HyMod node for a time step.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/HyMod/#Streamfall.update_params!-Union{Tuple{F}, Tuple{HyModNode, Vararg{F, 5}}} where F<:Float64","page":"HyMod","title":"Streamfall.update_params!","text":"update_params!(node::HyModNode, Sm_max::F, B::F, alpha::F, Kf::F, Ks::F) where {F<:Float64}\n\nUpdate parameters for HyMod.\n\n\n\n\n\n","category":"method"},{"location":"API/nodes/HyMod/#Streamfall.SimpleHyModNode","page":"HyMod","title":"Streamfall.SimpleHyModNode","text":"Simple implementation of HyMod - does not include snow melt processes (see [1]).\n\nAdapted with kind permission from: https://github.com/jdherman/GRA-2020-SALib\n\nReferences\n\nGharari, S., Hrachowitz, M., Fenicia, F., Savenije, H.H.G., 2013.  An approach to identify time consistent model parameters: sub-period calibration.  Hydrology and Earth System Sciences 17, 149-161.  https://doi.org/10.5194/hess-17-149-2013\nWagener, T., Boyle, D. P., Lees, M. J., Wheater, H. S., Gupta, H. V.,  and Sorooshian, S., 2001. A framework for development and applica-  tion of hydrological models, Hydrol. Earth Syst. Sci., 5, 13-26,  https://doi.org/10.5194/hess-5-13-2001.\n\n\n\n\n\n","category":"type"},{"location":"API/nodes/HyMod/#Streamfall.SimpleHyModNode-Tuple{String, Vararg{Float64, 6}}","page":"HyMod","title":"Streamfall.SimpleHyModNode","text":"SimpleHyModNode(\n    name::String, area::Float64, sm_max::Float64, B::Float64,\n    alpha::Float64, Kf::Float64, Ks::Float64\n)\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Included-metrics","page":"Included metrics","title":"Included metrics","text":"","category":"section"},{"location":"metrics/","page":"Included metrics","title":"Included metrics","text":"Modules = [Streamfall]\nOrder   = [:function, :macro, :type]\nPages   = [\"metrics.jl\"]","category":"page"},{"location":"metrics/#Streamfall.ADJ_R2-Tuple{Any, Any, Int64}","page":"Included metrics","title":"Streamfall.ADJ_R2","text":"ADJ_R2(obs, sim, p::Int64)::Float64\n\nAdjusted R².\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\np::Int64 : number of explanatory variables\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.BKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.BKGE","text":"BKGE(obs, sim)::Float64\n\nBounded KGE, bounded between -1 and 1.\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.BmKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.BmKGE","text":"BmKGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nBounded modified KGE between -1 and 1.\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.BnpKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.BnpKGE","text":"BnpKGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nBounded non-parametric KGE between -1 and 1.\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.EV-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.EV","text":"EV(obs, sim)\n\nExplained Variance.\n\nIndicates the amount of variation in the observations which the predictions are able to explain.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.KGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.KGE","text":"KGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nCalculate the 2009 Kling-Gupta Efficiency (KGE) metric.\n\nDecomposes NSE into correlation (r), relative variability (α), and bias (β) terms.\n\nA KGE score of 1 means perfect fit. A score < -0.41 indicates that the mean of observations provides better estimates (see Knoben et al., [2]).\n\nThe scaling argument expects a three-valued tuple which scales r, α and β factors respectively. If not specified, defaults to 1.\n\nNote: Although similar, NSE and KGE cannot be directly compared.\n\nReferences\n\nGupta, H.V., Kling, H., Yilmaz, K.K., Martinez, G.F., 2009.  Decomposition of the mean squared error and NSE performance criteria:  Implications for improving hydrological modelling.  Journal of Hydrology 377, 80–91.  https://doi.org/10.1016/j.jhydrol.2009.08.003\nKnoben, W.J.M., Freer, J.E., Woods, R.A., 2019.  Technical note: Inherent benchmark or not? Comparing Nash-Sutcliffe and Kling-Gupta efficiency scores (preprint).  Catchment hydrology/Modelling approaches.  https://doi.org/10.5194/hess-2019-327\nMizukami, N., Rakovec, O., Newman, A.J., Clark, M.P., Wood, A.W.,  Gupta, H.V., Kumar, R., 2019.  On the choice of calibration metrics for “high-flow”      estimation using hydrologic models.  Hydrology and Earth System Sciences 23, 2601–2614.  https://doi.org/10.5194/hess-23-2601-2019\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.LME-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.LME","text":"LME(obs, sim)::Float64\n\nLiu Mean Efficiency metric (LME).\n\nReformulation of the KGE metric said to be advantageous for capturing extreme flow events.\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\n\nReferences\n\nLiu, D., 2020.  A rational performance criterion for hydrological model.  Journal of Hydrology 590, 125488.  https://doi.org/10.1016/j.jhydrol.2020.125488\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.MAE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.MAE","text":"MAE(obs, sim)\n\nMean Absolute Error.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.ME-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.ME","text":"ME(obs, sim)\n\nMean Error.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.NKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.NKGE","text":"NKGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nNormalized KGE between 0 and 1.\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.NNSE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.NNSE","text":"NNSE(obs, sim)\n\nNormalized Nash-Sutcliffe Efficiency score (bounded between 0 and 1).\n\nReferences\n\nNossent, J., Bauwens, W., 2012.  Application of a normalized Nash-Sutcliffe efficiency to improve the accuracy of the Sobol’ sensitivity analysis of a hydrological model.  EGU General Assembly Conference Abstracts 237.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.NSE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.NSE","text":"NSE(obs, sim)\n\nThe Nash-Sutcliffe Efficiency score.\n\nRanges from 1.0 to -∞, where values below zero indicate the mean of observations would outperform a model.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.NSE_logbias-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.NSE_logbias","text":"NSE_logbias(obs, sim; metric=NSE, bias_threshold=5.0, shape=2.5)\n\nThe NSE_logbias meta-metric provides a weighted combination of a least-squares approach and a logarithmic function of bias. The metric penalizes predictions with an overall bias above a threshold (defined as 5% in [1]).\n\nIt is also referred to as the Viney F score.\n\nExtended help\n\nThe penalty applied is non-symmetrical (or multiplicatively symmetrical) in that predictions that are double the observed are penalized identically to predictions that are half the observed volume.\n\nArguments\n\nobs::Vector : Historic observations to compare against\nsim::Vector : Modeled time series\nmetric::Function : least-squares method to use, defaults to NSE\nbias_threshold::Float64 : Bias threshold after which the score given by metric is penalized, defaults to 5 (%)\nshape::Float64 : Exponent value controlling shape of penalization (see Figure 2 in [1]).\n\nReferences\n\nViney, N. R., Perraud, J., Vaze, J., Chiew, F.H.S., Post, D.A., Yang, A. 2009  The usefulness of bias constraints in model calibration for regionalisation      to ungauged catchments  18th World IMACS / MODSIM Congress, Cairns, Australia, 13 - 17 July 2009  Available at:  https://www.researchgate.net/publication/294697092Theusefulnessofbiasconstraintsinmodelcalibrationforregionalisationtoungauged_catchments\nTeng, J., Potter, N.J., Chiew, F.H.S., Zhang, L., Wang, B., Vaze, J., Evans, J.P., 2015.  How does bias correction of regional climate model precipitation affect modelled runoff?  Hydrology and Earth System Sciences 19, 711–728.  https://doi.org/10.5194/hess-19-711-2015\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.NmKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.NmKGE","text":"NmKGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nNormalized modified KGE between 0 and 1.\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.NnpKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.NnpKGE","text":"Normalized non-parametric KGE between 0 and 1.\n\nArguments\n\nobs : observations\nsim : modeled results\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.PBIAS-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.PBIAS","text":"PBIAS(obs::Vector, sim::Vector)::Float64\n\nPercent bias between sim and obs\n\nModel performance for streamflow can be determined to be satisfactory if the Nash-Sutcliffe Efficiency (NSE) score > 0.5, the RMSE standard deviation ratio (RSR) < 0.7 and percent bias (PBIAS) is +/- 25% (see [1]).\n\nReferences\n\nMoriasi, D.N., Arnold, J.G., Liew, M.W.V., Bingner, R.L.,  Harmel, R.D., Veith, T.L., 2007.  Model Evaluation Guidelines for Systematic Quantification  of Accuracy in Watershed Simulations.  Transactions of the ASABE 50, 885–900.  https://doi.org/10.13031/2013.23153\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.R2-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.R2","text":"R2(obs, sim)::Float64\n\nCoefficient of determination (R²)\n\nAliases NSE()\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.RMSE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.RMSE","text":"RMSE(obs, sim)\n\nRoot Mean Square Error.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.RSR-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.RSR","text":"RSR(obs::Vector, sim::Vector)::Float64\n\nThe RMSE-observations standard deviation ratio (RSR).\n\nVaries between 0 and a large positive value, where 0 indicates an RMSE value of 0.\n\nReferences\n\nMoriasi, D.N., Arnold, J.G., Liew, M.W.V., Bingner, R.L.,  Harmel, R.D., Veith, T.L., 2007.  Model Evaluation Guidelines for Systematic Quantification  of Accuracy in Watershed Simulations.  Transactions of the ASABE 50, 885–900.  https://doi.org/10.13031/2013.23153\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.handle_missing-Union{Tuple{T2}, Tuple{T}, Tuple{F}, Tuple{F, Vector{T}, Vector{T2}}} where {F, T<:Real, T2}","page":"Included metrics","title":"Streamfall.handle_missing","text":"handle_missing(metric_function, simulated, observed; handle_missing=:skip)\n\nConvenience wrapper to handle missing data in observations.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.inverse_metric-Tuple{Any, Any, Function}","page":"Included metrics","title":"Streamfall.inverse_metric","text":"inverse_metric(obs, sim, metric::Function; comb_method::Function=mean, ϵ=1e-2)\n\nA meta-objective function which combines the performance of the given metric as applied to the discharge and the inverse of the discharge.\n\nBy default, the combination method is to take the mean.\n\nArguments\n\nobs : observed\nsim : modeled results\nmetric : objective function\ncomb_method : Method to combine outputs (default: mean)\nϵ : offset value to use (enables use with zero-flow time steps), defaults to 1e-2\n\nReferences\n\nGarcia, F., Folton, N., Oudin, L., 2017.  Which objective function to calibrate rainfall–runoff models      for low-flow index simulations?  Hydrological Sciences Journal 62, 1149–1166.  https://doi.org/10.1080/02626667.2017.1308511\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.mKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.mKGE","text":"mKGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nCalculate the modified KGE metric (2012).\n\nAlso known as KGE prime (KGE').\n\nExtended help\n\nIt is not recommended to apply KGE' with log-transformed flows (see [2]). Numerical instabilities arise as flow approaches values close to zero. This is possible under extreme dry conditions or by chance when sub-sampling.\n\nIn cases where observations are constant or otherwise displays zero variance or zero mean flow, this implementation applies a simple logistic function (ℯ⁻ˣ) to gain an indication of simulated data's distance to zero.\n\nThis is to:\n\navoid NaNs influencing subsequent calculations\nallow use with split methods which may partition streamflows into periods of 0 flows.\n\nArguments\n\nobs::Vector: observations\nsim::Vector : modeled results\nscaling::Tuple : scaling factors in order of timing (r), magnitude (β), variability (γ).                    Defaults to (1,1,1).\n\nReferences\n\nKling, H., Fuchs, M., Paulin, M., 2012.  Runoff conditions in the upper Danube basin under an ensemble of climate change scenarios.  Journal of Hydrology 424–425, 264–277.  https://doi.org/10.1016/j.jhydrol.2012.01.011\nSantos, L., Thirel, G., Perrin, C., 2018.  Technical note: Pitfalls in using log-transformed flows within the KGE criterion.  Hydrology and Earth System Sciences 22, 4583–4591.  https://doi.org/10.5194/hess-22-4583-2018\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.mean_NmKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.mean_NmKGE","text":"mean_NmKGE(obs, sim; scaling=(1.0, 1.0, 1.0), ϵ=1e-2)\n\nMean Inverse NmKGE\n\nSaid to produce better fits for low-flow indices compared to mKGE (see [1]).\n\nArguments\n\nobs::Vector : observations\nsim::Vector : modeled results\nscaling::Tuple : scaling factors for r, α, and β (defaults to 1.0)\nϵ::Float64 : small constant to use with inverse flow to allow consideration of periods with no flow. Defaults to 1e-2.\n\nReferences\n\nGarcia, F., Folton, N., Oudin, L., 2017.  Which objective function to calibrate rainfall–runoff      models for low-flow index simulations?  Hydrological Sciences Journal 62, 1149–1166.  https://doi.org/10.1080/02626667.2017.1308511\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.naive_split_metric-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.naive_split_metric","text":"naive_split_metric(obs, sim; n_members::Int=365, metric::Function=NNSE, comb_method::Function=mean)\n\nNaive approach to split metrics.\n\nSplit metrics are a meta-objective optimization approach which \"splits\" data into subperiods. The objective function is calculated for each subperiod and then recombined. The approach addresses the lack of consideration of dry years with least-squares.\n\nIn Fowler et al., [1] the subperiod is one year. The implementation offered here is \"naive\" in that the data is partitioned into N chunks of n_members and does not consider date/time.\n\nArguments\n\nobs::Vector : Historic observations to compare against\nsim::Vector : Modeled time series\nn_members::Int : number of members per chunk (i.e., sub-samples), defaults to 365\nmetric::Function : Objective function to apply, defaults to NNSE\ncomb_method::Function : Recombination method, defaults to mean\n\nReferences\n\nFowler, K., Peel, M., Western, A., Zhang, L., 2018.  Improved Rainfall-Runoff Calibration for Drying Climate: Choice of Objective Function.  Water Resources Research 54, 3392–3408.  https://doi.org/10.1029/2017WR022466\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.npKGE-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.npKGE","text":"npKGE(obs, sim; scaling=(1.0, 1.0, 1.0))::Float64\n\nCalculate the non-parametric Kling-Gupta Efficiency (KGE) metric.\n\nArguments\n\nobs : observations\nsim : modeled\nscaling : scaling factors for timing (s), variability (α), magnitude (β)\n\nReferences\n\nPool, S., Vis, M., Seibert, J., 2018.  Evaluating model performance: towards a non-parametric variant of the Kling-Gupta efficiency.  Hydrological Sciences Journal 63, 1941–1953.  https://doi.org/10.1080/02626667.2018.1552002\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.relative_skill_score-Tuple{Float64, Float64}","page":"Included metrics","title":"Streamfall.relative_skill_score","text":"relative_skill_score(Sb::Float64, Sm::Float64)::Float64\n\nRelative Skill Score.\n\nProvides an indication of model performance relative to a known benchmark score.\n\nSuitable for use with least-squares approaches that provide skill scores ranging from 1 to -∞.\n\nArguments\n\nSb : Benchmark score\nSm : Model score\n\nReferences\n\nKnoben, W.J.M., Freer, J.E., Woods, R.A., 2019.  Technical note: Inherent benchmark or not?      Comparing Nash-Sutcliffe and Kling-Gupta efficiency scores (preprint).  Catchment hydrology/Modelling approaches.  https://doi.org/10.5194/hess-2019-327\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.skill_score-Tuple{Any, Any}","page":"Included metrics","title":"Streamfall.skill_score","text":"skill_score(model_score, benchmark_score)\n\nAllows comparison of any model compared against a pre-defined benchmark, assuming both scores were obtained with the same objective function.\n\nPositive values indicate a model is better than the benchmark, and negative values indicate a model performs worse.\n\nExtended help\n\nIt is noted in Knoben et al., [1] that the skill score should always be contextualized with the original benchmark value. Interpreting skill scores by themselves may become difficult if the benchmark score is already quite high. A small improvement of no real practical value could be misconstrued as a large improvement. As an example, if the benchmark has an KGE score of 0.999 and its counterpart 0.9995, then a skill score of 0.5 will be reported.\n\nReferences\n\nKnoben, W.J.M., Freer, J.E., Woods, R.A., 2019.  Technical note: Inherent benchmark or not? Comparing Nash-Sutcliffe and Kling-Gupta efficiency scores (preprint).  Catchment hydrology/Modelling approaches.  https://doi.org/10.5194/hess-2019-327\nTowner, J., Cloke, H.L., Zsoter, E., Flamig, Z., Hoch, J.M., Bazo, J., Coughlan de Perez, E., Stephens, E.M., 2019.  Assessing the performance of global hydrological models for capturing peak river flows in the Amazon basin.  Hydrology and Earth System Sciences 23, 3057–3080.  https://doi.org/10.5194/hess-23-3057-2019\n\n\n\n\n\n","category":"method"},{"location":"metrics/#Streamfall.@bound-Tuple{Any}","page":"Included metrics","title":"Streamfall.@bound","text":"Bounds given metric between -1.0 and 1.0, where 1.0 is perfect fit.\n\nSuitable for use with any metric that ranges from 1 to -∞.\n\nReferences\n\nMathevet, T., Michel, C., Andréassian, V., Perrin, C., 2006.  A bounded version of the Nash-Sutcliffe criterion for better model  assessment on large sets of basins.  IAHS-AISH Publication 307, 211-219.  https://iahs.info/uploads/dms/13614.21–211-219-41-MATHEVET.pdf\n\nExample\n\njulia> import Streamfall: @bound, KGE\njulia> @bound KGE([1,2], [3,2])\n-0.35653767993482094\n\n\n\n\n\n","category":"macro"},{"location":"metrics/#Streamfall.@mean_inverse","page":"Included metrics","title":"Streamfall.@mean_inverse","text":"Applies mean inverse approach to a metric.\n\nSuitable for use with any metric that ranges from 1 to -∞.\n\nIf using with other macros such as @normalize or @bound, these must come first.\n\nReferences\n\nGarcia, F., Folton, N., Oudin, L., 2017.  Which objective function to calibrate rainfall–runoff      models for low-flow index simulations?  Hydrological Sciences Journal 62, 1149–1166.  https://doi.org/10.1080/02626667.2017.1308511\n\nExample\n\njulia> import Streamfall: @normalize, @mean_inverse, KGE\njulia> @normalize @mean_inverse KGE [1,2] [3,2] 1e-6\n0.3193506006429825\n\n\n\n\n\n","category":"macro"},{"location":"metrics/#Streamfall.@normalize-Tuple{Any}","page":"Included metrics","title":"Streamfall.@normalize","text":"Normalizes given metric between 0.0 and 1.0, where 1.0 is perfect fit.\n\nSuitable for use with any metric that ranges from 1 to -∞.\n\nReferences\n\nNossent, J., Bauwens, W., 2012.  Application of a normalized Nash-Sutcliffe efficiency to improve the  accuracy of the Sobol' sensitivity analysis of a hydrological model.  EGU General Assembly Conference Abstracts 237.\n\nExample\n\njulia> import Streamfall: @normalize, KGE\njulia> @normalize KGE([1,2], [3,2])\n0.1111111111111111\n\n\n\n\n\n","category":"macro"},{"location":"metrics/#Streamfall.@split","page":"Included metrics","title":"Streamfall.@split","text":"Applies split meta metric approach.\n\nIf using with other macros such as @normalize or @bound, these must come first.\n\nReferences\n\nFowler, K., Peel, M., Western, A., Zhang, L., 2018.  Improved Rainfall-Runoff Calibration for Drying Climate:  Choice of Objective Function.  Water Resources Research 54, 3392–3408.  https://doi.org/10.1029/2017WR022466\n\nExample\n\njulia> using Statistics\njulia> import Streamfall: @normalize, @split, KGE\njulia> @normalize @split KGE repeat([1,2], 365) repeat([3,2], 365) 365 mean\n0.3217309561946589\n\n\n\n\n\n","category":"macro"},{"location":"API/use_methods/#Methods-to-run-a-network-or-node","page":"Methods to run a network or node","title":"Methods to run a network or node","text":"","category":"section"},{"location":"API/use_methods/","page":"Methods to run a network or node","title":"Methods to run a network or node","text":"Modules = [Streamfall]\nOrder   = [:function, :type]\nPages   = [\"Streamfall.jl\"]","category":"page"},{"location":"API/use_methods/#Streamfall.align_time_frame-Union{Tuple{Vararg{T}}, Tuple{T}} where T<:DataFrames.DataFrame","page":"Methods to run a network or node","title":"Streamfall.align_time_frame","text":"align_time_frame(timeseries::T...)\n\nSubset an arbitrary number of DataFrames to their shared period of time.\n\nReturns subsetted copy of data in same order as input.\n\nExample\n\njulia> climate, streamflow = align_time_frame(climate, streamflow)\n\n\n\n\n\n","category":"method"},{"location":"API/use_methods/#Streamfall.find_common_timeframe-Union{Tuple{Vararg{T}}, Tuple{T}} where T<:DataFrames.DataFrame","page":"Methods to run a network or node","title":"Streamfall.find_common_timeframe","text":"find_common_timeframe(timeseries::T...)\n\nFind common time frame between time series.\n\nRequires that all DataFrames have a \"Date\" column.\n\n\n\n\n\n","category":"method"},{"location":"API/use_methods/#Streamfall.prep_state!-Tuple{Streamfall.StreamfallNetwork, Int64}","page":"Methods to run a network or node","title":"Streamfall.prep_state!","text":"prep_state!(sn::StreamfallNetwork, timesteps::Int64)::Nothing\n\nPrepare a network for a run by pre-allocating result stores.\n\n\n\n\n\n","category":"method"},{"location":"API/use_methods/#Streamfall.run_basin!-Tuple{Streamfall.StreamfallNetwork, Climate}","page":"Methods to run a network or node","title":"Streamfall.run_basin!","text":"run_basin!(sn::StreamfallNetwork, climate::Climate; inflow=nothing, extraction=nothing, exchange=nothing)\n\nRun scenario for an entire catchment/basin.\n\n\n\n\n\n","category":"method"},{"location":"API/use_methods/#Streamfall.run_node!-Tuple{NetworkNode, Climate, Int64}","page":"Methods to run a network or node","title":"Streamfall.run_node!","text":"run_node!(\n    node::NetworkNode, climate::Climate, ts::Int;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)\n\nRun a specific node for a specified time step.\n\nArguments\n\nnode : A node in a network\nclimate : Climate dataset\nts : current time step\ninflow : Time series of inflows from upstream nodes.\nextraction : Time series of water orders (expects column of _releases)\nexchange : Time series of groundwater flux\n\n\n\n\n\n","category":"method"},{"location":"API/use_methods/#Streamfall.run_node!-Tuple{NetworkNode, Climate}","page":"Methods to run a network or node","title":"Streamfall.run_node!","text":"run_node!(\n    node::NetworkNode, climate::Climate;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)::Nothing\n\nRun a specific node, and only that node, for all time steps.\n\nArguments\n\nnode : Any Streamfall NetworkNode\nclimate : Climate data\ninflow::Union{DataFrame, Vector, Number} : Inflow to node\nextraction::Union{DataFrame, Vector, Number} : Extractions from this subcatchment\nexchange::Union{DataFrame, Vector, Number} : Groundwater flux\n\n\n\n\n\n","category":"method"},{"location":"API/use_methods/#Streamfall.run_node!-Tuple{Streamfall.StreamfallNetwork, Int64, Climate, Int64}","page":"Methods to run a network or node","title":"Streamfall.run_node!","text":"run_node!(\n    sn::StreamfallNetwork, node_id::Int, climate::Climate, ts::Int64;\n    inflow=nothing, extraction=nothing, exchange=nothing\n)::Nothing\n\nGeneric run method that runs a model attached to a given node for a given timestep. Recurses upstream as needed.\n\nArguments\n\nsn::StreamfallNetwork\nnode_id : Node to run in the network\nclimate : Climate object holding rainfall and evaporation data (or temperature)\nts : Timestep to run\nextraction : Water orders for each time step (defaults to nothing)\nexchange : Exchange with groundwater system at each time step (defaults to nothing)\n\n\n\n\n\n","category":"method"},{"location":"examples/node_creation/#Node-creation","page":"Node creation","title":"Node creation","text":"","category":"section"},{"location":"examples/node_creation/","page":"Node creation","title":"Node creation","text":"Example of creating a node with default parameters, then updating the parameters with user-defined values.","category":"page"},{"location":"examples/node_creation/","page":"Node creation","title":"Node creation","text":"using Streamfall\n\nhymod_node = create_node(SimpleHyModNode, \"410730\", 129.2)\n\n# Hymod parameters (\"hy_\" prefix is simply to avoid any variable name conflicts)\nhy_Sm_max = 250.0\nhy_B = 1.0\nhy_alpha = 0.2\nhy_Kf = 0.5\nhy_Ks = 0.05\n\n# Update parameters\nupdate_params!(hymod_node, hy_Sm_max, hy_B, hy_alpha, hy_Kf, hy_Ks)","category":"page"},{"location":"expected_data_formats/#Input-data-format","page":"Input data format","title":"Input data format","text":"","category":"section"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"By convention, Streamfall expects data to be formatted in the following manner:","category":"page"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"All time series must have a \"Date\" column in YYYY-mm-dd format.\nBy convention, column names follow the pattern: [node_name]_[phenomenon]_[other metadata]\nUnit of measure itself is optionally included in square brackets ([])\nIn-file comments are indicated with a hash (#)","category":"page"},{"location":"expected_data_formats/#Streamflow-data","page":"Input data format","title":"Streamflow data","text":"","category":"section"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"Data for a node representing a subcatchment or gauge should, at a minimum, include columns for date and streamflow (Q) in a consistent unit (in this case, megaliters/day).","category":"page"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"Streamflow columns should begin with its name and include an identifiable suffix. Here, _Q is used but this can be user-defined when preparing data for modelling.","category":"page"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"# A comment\nDate,406219_Q_[ML]\n1988-07-23,0.5184\n1988-07-24,13.6512\n1988-07-25,407.6352\n1988-07-26,2488.4928\n1988-07-27,3443.6448\n... snip ...","category":"page"},{"location":"expected_data_formats/#Dam-releases","page":"Input data format","title":"Dam releases","text":"","category":"section"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"Note that releases is denoted with _releases.","category":"page"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"# A comment\nDate, 406000_releases_[ML], 406000_extractions_[ML]\n1981-01-01,0,0\n1981-01-02,359,0\n1981-01-03,359,0\n1981-01-04,359,0\n1981-01-05,460,0\n... snip ...","category":"page"},{"location":"expected_data_formats/#Climate-data","page":"Input data format","title":"Climate data","text":"","category":"section"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"Streamfall currently expects data for all nodes to be stored in one large DataFrame.","category":"page"},{"location":"expected_data_formats/#Example-climate-data-structure","page":"Input data format","title":"Example climate data structure","text":"","category":"section"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"Date, 406214_P, 406214_ET, 406219_P, 406219_ET\n1981-01-01, 0.0, 4.8, 0.0, 4.9\n1981-01-02, 0.1, 0.5, 0.1, 3.3\n1981-01-03, 10.5, 5.3, 7.2, 2.3\n1981-01-04, 9.89, 7.9, 6.1, 4.3\n1981-01-05, 0.3, 4.2, 0.2, 6.4\n... snip ...","category":"page"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"where P indicates rainfall, and ET denotes evapotranspiration.","category":"page"},{"location":"expected_data_formats/","page":"Input data format","title":"Input data format","text":"See Climate for more detail on climate data functions.","category":"page"},{"location":"examples/calibration/custom_calibration/#Customized-calibration","page":"Customized calibration","title":"Customized calibration","text":"","category":"section"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Streamfall provides built-in methods for model calibration, but custom metrics  and objective functions can be defined to better suit specific calibration needs. This example demonstrates how to create custom metrics that combine multiple performance metrics  or apply specific weightings to different aspects of model performance.","category":"page"},{"location":"examples/calibration/custom_calibration/#Basic-Structure","page":"Customized calibration","title":"Basic Structure","text":"","category":"section"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Streamfall adopts a two-pronged approach to handling objective functions.","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"The first is a \"default\" method assigned to each node (which can be overwritten/replaced).","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"A custom objective function for calibration typically accepts:","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"The parameter values to be evaluated\nClimate data for the simulation\nThe network or node being calibrated\nObservational data for comparison\nThe metric used to assess performance\nInputs to account for additional inflow, extraction and groundwater flux","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"The function then returns a single scalar value representing the optimization target  (to be minimized).","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Below is an example of the default implementation, copied and defined outside of Streamfall.","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"function custom_obj_func(\n    params, climate::Streamfall.Climate, node::Streamfall.NetworkNode, calib_data::Array;\n    metric::F, inflow=nothing, extraction=nothing, exchange=nothing\n) where {F}\n    update_params!(node, params...)\n\n    metric_func = (sim, obs) -> handle_missing(metric, sim, obs; handle_missing=:skip)\n\n    run_node!(node, climate; inflow=inflow, extraction=extraction, exchange=exchange)\n    score = metric_func(node.outflow, calib_data)\n\n    # Reset to clear stored values\n    reset!(node)\n\n    return score\nend\n\n# Example usage: create a node\nihacres_node = create_node(IHACRESBilinearNode, \"410730_ihacres\", 129.2)\n\n# Replace default method with the custom objective function\nihacres_node.obj_func = custom_obj_func\n\n# Then proceed with calibration as normal\n# calibrate!(...);","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"The above allows a finer level of control, allowing the objective function to account for climatic conditions as well as other external forcings (such as groundwater exchange).","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Alternatively, performance metrics can be defined for specific nodes, or node instances that make up an ensemble.","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Lets begin with a default calibration for comparison","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"using Statistics\nusing CSV, DataFrames\nusing Streamfall\nusing StatsPlots  # To activate visualization extensions\n\n# Set up data\ndata_dir = joinpath(\n    dirname(dirname(pathof(Streamfall))),\n    \"test/data\"\n)\n\n# Historic flows\nobs_data = CSV.read(\n    joinpath(data_dir, \"cotter/climate/CAMELS-AUS_410730.csv\"),\n    DataFrame;\n    comment=\"#\"\n)\n\nQo = extract_flow(obs_data, \"410730\")\nclimate = extract_climate(obs_data)\n\n# Create a node\ngr4j_node = create_node(GR4JNode, \"410730\", 129.2)\n\n# Calibrate the model using NmKGE\ncalibrate!(\n    gr4j_node, climate, Qo, (obs, sim) -> 1.0 - Streamfall.NmKGE(obs, sim);\n    extraction=extraction_data, weighting=0.0,\n    MaxTime=300.0\n);\n\n# Visualize model performance (using a 1-year burn-in period)\nburn_in = 366\nburn_obs = Qo[burn_in:end, \"410730\"]\nrun_node!(gr4j_node, climate)\ngr4j_qp = quickplot(burn_obs, gr4j_node.outflow[burn_in:end], climate; label=\"GR4J\", log=true)\n# savefig(gr4j_qp, \"default_calibration_gr4j.png\")","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Below, the calibration is repeated using a custom metric which targets low-flow conditions.","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"# Create a node\ngr4j_node = create_node(GR4JNode, \"410730\", 129.2)\n\n# Define a custom objective function that combines multiple metrics to better account for\n# low-flow periods\nfunction custom_low_flow_objective(obs, sim)\n    # Filter for low flow periods (e.g., flow < 10th percentile)\n    low_flow_threshold = quantile(obs, 0.1)\n    low_flow_indices = findall(obs .<= low_flow_threshold)\n    \n    # Calculate metrics for low-flow periods\n    if !isempty(low_flow_indices)\n        # Apply log transform to emphasize low flow performance\n        log_obs = log.(obs[low_flow_indices] .+ 1e-6)\n        log_sim = log.(sim[low_flow_indices] .+ 1e-6)\n\n        # Note: we are using Normalized versions of the usual metrics\n        #       so the returned values are 0 - 1.\n        #       We then take the complement as the optimizer seeks to \n        #       minimize error.\n        kge_low = 1.0 - Streamfall.NmKGE(log_obs, log_sim)\n        \n        # Calculate metrics for all flows for balance\n        kge_all = 1.0 - Streamfall.NmKGE(obs, sim)\n        \n        # Combined score - weighting more heavily toward low flows\n        score = (0.7 * kge_low) + (0.3 * kge_all)\n    else\n        # Fallback if no low flows found\n        score = 1.0 - Streamfall.NmKGE(obs, sim)\n    end\n    \n    return score\nend\n\n# Calibrate the model\ncalibrate!(\n    gr4j_node, climate, Qo, custom_low_flow_objective;\n    extraction=extraction_data, weighting=0.0,\n    MaxTime=300.0\n);\n\n# Visualize model performance (using a 1-year burn-in period)\nburn_in = 366\nburn_obs = Qo[burn_in:end, \"410730\"]\nrun_node!(gr4j_node, climate)\ngr4j_qp = quickplot(burn_obs, gr4j_node.outflow[burn_in:end], climate; label=\"Weighted Ensemble\", log=true)\n# savefig(gr4j_qp, \"custom_calibration_gr4j.png\")","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"The results show improved performance under low-flow conditions, at the expense of mid-to-high flow conditions.","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Below is an example of defining a performance metric for specific nodes. For further detail on ensemble modeling, see the section on Weighted Ensemble Modeling.","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"# Reload data (just in case modifications were made)\nobs_data = CSV.read(\n    joinpath(data_dir, \"cotter/climate/CAMELS-AUS_410730.csv\"),\n    DataFrame;\n    comment=\"#\"\n)\n\nQo = extract_flow(obs_data, \"410730\")\nclimate = extract_climate(obs_data)\n\n# Create one instance each of IHACRES_CMD, GR4J and SIMHYD\nihacres_node = create_node(IHACRESBilinearNode, \"410730_ihacres\", 129.2)\ngr4j_node = create_node(GR4JNode, \"410730_gr4j\", 129.2)\nsimhyd_node = create_node(SIMHYDNode, \"410730_simhyd\", 129.2)\n\n# Create a weighted ensemble with equal weights\n# The default behavior is to combine component predictions with a normalized weighted sum.\nensemble = create_node(\n    WeightedEnsembleNode, \n    [ihacres_node, gr4j_node, simhyd_node], \n    [0.5, 0.5, 0.5]\n)\n\n# Define a custom objective function that combines multiple metrics\nfunction custom_low_flow_objective(obs, sim)\n    # Filter for low flow periods (e.g., flow < 10th percentile)\n    low_flow_threshold = quantile(obs, 0.1)\n    low_flow_indices = findall(obs .<= low_flow_threshold)\n\n    # Calculate metrics for all flows for balance\n    kge_all = 1.0 - Streamfall.NmKGE(obs, sim)\n    \n    # Calculate metrics for low-flow periods\n    if !isempty(low_flow_indices)\n        # Apply log transform to emphasize low flow performance\n        log_obs = log.(obs[low_flow_indices] .+ 1e-6)\n        log_sim = log.(sim[low_flow_indices] .+ 1e-6)\n\n        # Note: we are using Normalized versions of the usual metrics\n        #       so the returned values are 0 - 1.\n        #       We then take the complement as the optimizer seeks to \n        #       minimize error.\n        kge_low = 1.0 - Streamfall.NmKGE(log_obs, log_sim)\n        \n        # Combined score - weighting more heavily toward low flows\n        score = (0.8 * kge_low) + (0.2 * kge_all)\n    else\n        # Fallback if no low flows found\n        score = kge_all\n    end\n    \n    return score\nend\n\n# Assign different metrics to individual nodes\n# Make the GR4J node use the custom low-flow metric\ncustom_metrics = Dict(\n    \"410730_ihacres\" => (obs, sim) -> 1.0 - Streamfall.NmKGE(obs, sim),\n    \"410730_gr4j\" => custom_low_flow_objective,\n    \"410730_simhyd\" => (obs, sim) -> 1.0 - Streamfall.NmKGE(obs, sim)\n)\n\n# Copy flow data (these can be nodes in a network)\nQo[:, \"410730_ihacres\"] = Qo[:, \"410730\"]\nQo[:, \"410730_gr4j\"] = Qo[:, \"410730\"]\nQo[:, \"410730_simhyd\"] = Qo[:, \"410730\"]\n\n# Copy climate data for each node (these can be nodes in a network)\ninsertcols!(\n    climate.climate_data, \n    \"410730_ihacres_P\" => climate.climate_data[:, \"410730_P\"], \n    \"410730_ihacres_PET\" => climate.climate_data[:, \"410730_PET\"], \n    \"410730_ihacres_Q\" => climate.climate_data[:, \"410730_Q\"],\n    \"410730_gr4j_P\" => climate.climate_data[:, \"410730_P\"], \n    \"410730_gr4j_PET\" => climate.climate_data[:, \"410730_PET\"], \n    \"410730_gr4j_Q\" => climate.climate_data[:, \"410730_Q\"],\n    \"410730_simhyd_P\" => climate.climate_data[:, \"410730_P\"], \n    \"410730_simhyd_PET\" => climate.climate_data[:, \"410730_PET\"], \n    \"410730_simhyd_Q\" => climate.climate_data[:, \"410730_Q\"]\n)\n\n# Use the custom objective function in calibration\ncalibrate_instances!(\n    ensemble,\n    climate, \n    Qo,\n    custom_metrics;\n    MaxTime=300\n)\n\nburn_in = 366\nburn_obs = Qo[burn_in:end, \"410730\"]\nrun_node!(ensemble, climate)\nensemble_qp = quickplot(burn_obs, ensemble.outflow[burn_in:end], climate; label=\"Weighted Ensemble\", log=true)\n# savefig(ensemble_qp, \"custom_calibration_ensemble.png\")","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"(Image: )","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Here we see the weighted ensemble retains much of the performance characteristics under a variety of conditions.","category":"page"},{"location":"examples/calibration/custom_calibration/#Tips-for-Custom-Objective-Functions","page":"Customized calibration","title":"Tips for Custom Objective Functions","text":"","category":"section"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Normalization: Ensure different metrics are on comparable scales. Consider normalizing values to [0,1] range.\nComplementary Metrics: Different metrics capture different aspects of performance. Combining KGE (overall performance) with RMSE (high flows) and log-transformed metrics (low flows) provides balanced calibration.\nWeighting: Adjust weights based on your modeling priorities. Higher weights lead to more emphasis on specific aspects.\nError Handling: Include error checking for edge cases (e.g., all zero flows, missing data).\nTime Efficiency: Keep objective functions computationally efficient as they'll be called many times during calibration.","category":"page"},{"location":"examples/calibration/custom_calibration/#Further-Reading","page":"Customized calibration","title":"Further Reading","text":"","category":"section"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"For theoretical background on objective functions and performance metrics:","category":"page"},{"location":"examples/calibration/custom_calibration/","page":"Customized calibration","title":"Customized calibration","text":"Fowler, K., Peel, M., Western, A., Zhang, L., 2018. \nImproved Rainfall-Runoff Calibration for Drying Climate: Choice of Objective Function. \nWater Resources Research 54, 3392–3408. \nhttps://doi.org/10.1029/2017WR022466\nGarcia, F., Folton, N., Oudin, L., 2017. \nWhich objective function to calibrate rainfall–runoff models for low-flow index simulations? \nHydrological Sciences Journal 62, 1149–1166. \nhttps://doi.org/10.1080/02626667.2017.1308511","category":"page"},{"location":"examples/evaluation/simple_multisystem/#Simple-two-system-interaction","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"","category":"section"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"Here, a two-node network including a river and a dam is represented. The example is based on the Lower Campaspe catchment - a small semi-arid basin in North-Central Victoria, Australia.","category":"page"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"(Image: )","category":"page"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"The dam is the primary water store for farmers in the area. In this simplified example, we investigate the effect of changing water demands and related policies on historic dam levels. Water demands may shift due to choice in cultivated crops, changing water management practices, investment into more efficient irrigation systems, choice in crops, or a systemic change to water policies.","category":"page"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"In essence, this is a cursory investigation into \"what might have been\" if the regional context were different.","category":"page"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"For the purpose of this example, the farm water requirements are defined as a volume of daily water requirements throughout a growing season. A growing season is the period of time over which a crop is cultivated, and is assumed to be between May and February. In practice, water requirements are provided by another model.","category":"page"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"using CSV, DataFrames, YAML\nusing Dates\nusing StatsPlots\nusing Streamfall\n\nexample_data_dir = joinpath(dirname(dirname(pathof(Streamfall))), \"test/data/campaspe\")\n\n# Load climate data - in this case from a CSV file with data for all nodes.\n# Indicate which columns are precipitation and evaporation data based on partial identifiers\nclimate = Climate(joinpath(example_data_dir, \"climate/climate.csv\"), \"_rain\", \"_evap\")\n\n# Historic extractions from the dam\nextraction_data = CSV.read(\n    joinpath(example_data_dir, \"gauges/dam_extraction.csv\"), \n    DataFrame; \n    comment=\"#\"\n)\n\n# Load the example network\nsn = load_network(\"Example Network\", joinpath(example_data_dir, \"two_node_network.yml\"))\n\n# Run the model for the basin to obtain baseline values\nrun_basin!(sn, climate; extraction=extraction_data)\nbaseline_dam_level = sn[2].level\nbaseline_dam_outflow = sn[2].outflow\n\n# Get represented dates for simulation\nsim_dates = Streamfall.timesteps(climate)\n\n# Create DataFrame to use as a template to store water extractions\nextractions = copy(extraction_data)\n\n\"\"\"\nConvenience function handling interactions with all \"external\" models.\nNote: We are using a burn-in period of a year.\n\"\"\"\nfunction run_scenario(sn, climate, extractions, increased_demand; burn_in=366)\n    reset!(sn)\n    inlets, outlets = find_inlets_and_outlets(sn)\n\n    extractions = copy(extractions)\n\n    sim_dates = Streamfall.timesteps(climate)\n    prep_state!(sn, length(sim_dates))\n\n    for (ts, date) in enumerate(sim_dates)\n        if ((month(date) >= 5) || (month(date) <= 2))\n            # Within growing season (May - Feb)\n\n            # Additional agricultural water demand (ML/day) from historic conditions\n            # This would normally come from another model indicating daily water demands.\n            extractions[ts, \"406000_releases_[ML]\"] += increased_demand\n        end\n\n        for outlet in outlets\n            run_node!(sn, outlet, climate, ts; extraction=extractions)\n        end\n    end\n\n    # Return dam levels for assessment\n    return sn[2].level[burn_in:end]\nend\n\n\"\"\"\nA hypothetical Critical Threshold index.\n\nMean of proportional distance to critical threshold (default 55% of dam capacity).\nValues of 1 indicate the dam is always full, negative values indicate the dam levels are\nbelow the critical threshold.\n\nGreater values indicate greater water security but may have trade-offs with regard to\nenvironmental outcomes and farm profitability.\n\"\"\"\nfunction critical_threshold_index(levels; threshold=0.55)\n    max_level = 195\n    min_level = 160  # mAHD\n\n    # Essentially proportion of dam capacity\n    relative_level = ((levels .- min_level) ./ (max_level - min_level))\n\n    # Distance\n    indicator = (relative_level .- threshold) ./ (1.0 - threshold)\n\n    return round(mean(indicator), digits=4)\nend\n\n\nct_index = critical_threshold_index(baseline_dam_level[366:end])\nf = plot(sim_dates[366:end], baseline_dam_level[366:end]; label=\"Historic modelled ($(ct_index))\")\nresults = Vector{Vector{Float64}}(undef, 5)\n\nfor (i, daily_demand) in enumerate([-2.0, -0.5, 1.0, 3.0, 5.0])\n    results[i] = run_scenario(sn, climate, extractions, daily_demand)\n\n    ct_index = critical_threshold_index(results[i])\n\n    plot!(sim_dates[366:end], results[i]; label = \"+$(daily_demand) ML/day ($(ct_index))\")\nend\ndisplay(f)\n# savefig(\"simple_water_demand.png\")\n\nStreamfall.temporal_cross_section(sim_dates, calib_data[:, \"406000\"], sn[2].level)","category":"page"},{"location":"examples/evaluation/simple_multisystem/","page":"Simple two-system interaction","title":"Simple two-system interaction","text":"(Image: )","category":"page"},{"location":"examples/calibration/calibration/#Example-calibration","page":"Example calibration","title":"Example calibration","text":"","category":"section"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"\"\"\"\nExample showcasing calibrating and running a streamflow network.\n\nData is prepped with the script `campaspe_data_prep.jl` in the `test/data/campaspe`\ndirectory.\n\"\"\"\n\nusing Statistics\nusing CSV, YAML, DataFrames\nusing Streamfall\n\n# Import visualization packages to compile extensions\nusing StatsPlots, GraphPlot\n\nexample_data_dir = joinpath(dirname(dirname(pathof(Streamfall))), \"test/data\")\nsn = load_network(\n    \"Example Network\", \n    joinpath(example_data_dir, \"campaspe/campaspe_network.yml\")\n)\n\n# The Campaspe catchment is represented as a network of eight nodes, including one dam.\n# All nodes use the IHACRES_CMD rainfall-runoff model.\nplot_network(sn)\n\n# Load climate data - in this case from a CSV file with data for all nodes.\n# Indicate which columns are precipitation and evaporation data based on partial identifiers\nexample_data_dir = joinpath(dirname(dirname(pathof(Streamfall))), \"test/data/campaspe\")\nclimate = Climate(joinpath(example_data_dir, \"climate/climate.csv\"), \"_rain\", \"_evap\")\n\n# Historic flows and dam level data\ncalib_data = CSV.read(\n    joinpath(example_data_dir, \"gauges/outflow_and_level.csv\"),\n    DataFrame;\n    comment=\"#\"\n)\n\n# Historic extractions from the dam\nextraction_data = CSV.read(\n    joinpath(example_data_dir, \"gauges/dam_extraction.csv\"), \n    DataFrame; \n    comment=\"#\"\n)\n\n# We now have a dataset for calibration (`calib_data`) and a dataset indicating the\n# historic dam extractions (`extraction_data`).\n# `extraction_data` may also hold water extractions at each \"reach\".\n\n# Provide a metric to use to fit models against data.\n# Note that calibration always assumes minimization, so if the metric does not\n# provide this directionality, it must be wrapped to do so.\nmetric = (y, y_hat) -> 1.0 - Streamfall.NNSE(y, y_hat)\n# metric = (y, y_hat) -> 1.0 - Streamfall.NmKGE(y, y_hat)\n# metric = (y, y_hat) -> 1.0 - Streamfall.naive_split_metric(\n#     y, y_hat; n_members=7, metric=Streamfall.NmKGE, comb_method=mean\n# )\n# metric = Streamfall.RMSE\n\n# Alternatively, individual metrics for each node in a dictionary\n# (key-value pairs in the form of name => function).\n# Here, Normalized KGE′ is used for all nodes.\n# metrics = Dict{String,Function}(\n#     n.name => (y, y_hat) -> 1.0 - Streamfall.NmKGE(y, y_hat) for n in sn\n# )\n\n# Calibrate all gauges in network using Adaptive Differential Evolution with the\n# BlackBoxOptim.jl package. Any BlackBoxOptim keyword arguments are passed through.\n# The parameter values provided in the network specification will be used as the initial\n# guess.\n# The default is to spend 5 mins on each node (MaxTime=300), but for this example we run\n# calibration for 1mins/node (MaxTime=60).\n# If the downstream node represents a dam, the current node is calibrated by fitting the\n# outflows such that it reproduces the observed dam levels.\n# The `weighting` parameter controls the weighting between nodes for calibration.\n# A choice can be made to calibrate against outflows (a weighting of 1) or dam levels\n# (a weighting of 0).\n# Here, we calibrate to downstream dam levels only (a zero weighting on node outflows)\ncalibrate!(\n    sn, climate, calib_data, metric;\n    extraction=extraction_data, weighting=0.0,\n    MaxTime=60.0\n);\n\n# A specific node can also be calibrated, assuming all nodes upstream have already been \n# calibrated.\n# Otherwise, set `calibrate_all=true` to calibrate all upstream nodes as well.\n# To produce the results shown below, the node upstream from the dam was calibrated an\n# additional 2 hours.\n# calibrate!(\n#     sn, 2, climate, calib_data, metric;\n#     extraction=extraction_data, weighting=0.0, calibrate_all=false,\n#     MaxTime=7200.0\n# );\n\n# Run all nodes in the catchment\nrun_catchment!(sn, climate; extraction=extraction_data)\n\n# Get performance metrics for dam levels\ndam_obs = calib_data[:, \"406000\"]\ndam_node = sn[3]\ndam_sim = dam_node.level\n\nStreamfall.RMSE(dam_obs[366:end], dam_sim[366:end])\nStreamfall.NSE(dam_obs[366:end], dam_sim[366:end])\nStreamfall.mKGE(dam_obs[366:end], dam_sim[366:end])\n\n# Plot results\nf = quickplot(dam_obs, dam_sim, climate; label=\"Modelled - 406000\", log=false, burn_in=366)\n# savefig(f, \"example_dam_level.png\")\n\n# Save calibrated network to a file\n# save_network(sn, \"example_network_calibrated.yml\")\n\n# Illustrating that the re-loaded network reproduces the results as above\nsn2 = load_network(\"Calibrated Example\", \"example_network_calibrated.yml\")\nrun_catchment!(sn2, climate; extraction=extraction_data)\n\ndam_node = sn2[3]\ndam_sim = dam_node.level\n\nrmse_score = Streamfall.RMSE(dam_obs[366:end], dam_sim[366:end])\nnse_score = Streamfall.NSE(dam_obs[366:end], dam_sim[366:end])\nmKGE_score = Streamfall.mKGE(dam_obs[366:end], dam_sim[366:end])\n\n@info \"Scores: \" rmse_score nse_score mKGE_score\n\nf2 = quickplot(dam_obs, dam_sim, climate, \"Modelled - 406000\", false; burn_in=366)\n\ntemporal_cross_section(sim_dates, calib_data[:, \"406000\"], sn2[3].level)","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"The last two lines produces the plots below","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"(Image: )","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"The quickplot() function creates the figure displayed above which shows dam levels on the left (observed and modelled) with a Q-Q plot on the right.","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"(Image: )","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"The above shows a \"cross-section\" of model predictions for each month-day across simulation time. It is useful to gain an understanding on when models may underperform and give a sense of a models predictive uncertainty. The units of the y-axis are the same as for the node (in this case, meters).","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"Ideally, the median error would be a straight line and the confidence intervals would be as thin and consistent as possible for all month-days.","category":"page"},{"location":"examples/calibration/calibration/","page":"Example calibration","title":"Example calibration","text":"Here, we see that while performance is generally good (mean of Median Error is near zero), the model can under-estimate dam levels in late-April to May and displays a tendency to over-estimate dam levels between January and June, relative to other times.","category":"page"},{"location":"examples/evaluation/model_comparison/#Model-comparison-example","page":"Model comparison example","title":"Model comparison example","text":"","category":"section"},{"location":"examples/evaluation/model_comparison/","page":"Model comparison example","title":"Model comparison example","text":"This example showcases a comparison of models using multi-processing.","category":"page"},{"location":"examples/evaluation/model_comparison/","page":"Model comparison example","title":"Model comparison example","text":"Here, the Gingera catchment along the Cotter River is examined.","category":"page"},{"location":"examples/evaluation/model_comparison/","page":"Model comparison example","title":"Model comparison example","text":"using Distributed\nusing StatsPlots\n\nN = 4\nif nworkers() < N\n    addprocs(N, exeflags=\"--project=$(Base.active_project())\")\nend\n\n@everywhere begin\n    using CSV, DataFrames\n    using Streamfall\n\n    HERE = dirname(dirname(pathof(Streamfall)))\n    DATA_PATH = joinpath(HERE, \"test/data/cotter/\")\n\n    # Load observations\n    date_format =\n    obs_data = CSV.read(\n        joinpath(DATA_PATH, \"climate/CAMELS-AUS_410730.csv\"),\n        DataFrame;\n        comment=\"#\",\n        dateformat=\"YYYY-mm-dd\"\n    )\n\n    hist_streamflow = extract_flow(obs_data, \"410730\")\n    # hist_streamflow = obs_data[:, [\"Date\", \"410730_Q\"]]\n    climate_data = obs_data[:, [\"Date\", \"410730_P\", \"410730_PET\"]]\n    climate = Climate(climate_data, \"_P\", \"_PET\")\n\n    burn_in = 366  # 1 year burn-in period\n\n    # Create objective function to minimize (here we use Normalized KGE')\n    func = (obs, sim) -> 1.0 - Streamfall.NmKGE(obs[burn_in:end], sim[burn_in:end])\n    opt_func = (node) -> calibrate!(node, climate, hist_streamflow, func; MaxTime=180)\nend\n\n\n# Create individual nodes\nhymod_node = create_node(SimpleHyModNode, \"410730\", 129.2)\ngr4j_node = create_node(GR4JNode, \"410730\", 129.2)\nsimhyd_node = create_node(SIMHYDNode, \"410730\", 129.2)\nihacres_node = create_node(IHACRESBilinearNode, \"410730\", 129.2)\n\n\n# Calibrate each node separately using multiprocessing\nnode_types = [\"HyMod\", \"GR4J\", \"SIMHYD\", \"IHACRES\"]\nnode_list = [hymod_node, gr4j_node, simhyd_node, ihacres_node]\nresult = pmap(opt_func, node_list)\n\n# Create comparison plot\nQo = hist_streamflow[:, \"410730\"]\nQo_burn = Qo[burn_in:end]\nres_plots = []\n\nfor ((res, opt), node, n_name) in zip(result, node_list, node_types)\n    update_params!(node, best_candidate(res)...)\n    reset!(node)\n    run_node!(node, climate)\n\n    node_burn = node.outflow[burn_in:end]\n\n    # Plot log scale\n    res_plot = quickplot(Qo, node, climate; label=n_name, log=true, burn_in=366)\n    push!(res_plots, res_plot)\nend\n\ncombined_plot = plot(\n    [rplt for rplt in res_plots]...,\n    layout=(length(node_list),1),\n    size=(950,450*length(node_list)),\n)\n\ndisplay(combined_plot)\n\nsavefig(\"multi_model_comparison.png\")","category":"page"},{"location":"examples/evaluation/model_comparison/","page":"Model comparison example","title":"Model comparison example","text":"(Image: )","category":"page"},{"location":"#Streamfall.jl-Documentation","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"","category":"section"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"Streamfall: A graph-based streamflow modelling system written in Julialang.","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"Streamfall leverages the Julia language and ecosystem to provide:","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"Quick hetrogenous modelling of a stream network\nUse of different rainfall-runoff models and their ensembles in tandem\nModelling and assessment of interacting systems\nA wide range of performance metrics","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"This package includes implementations of the following:","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"GR4J\nHyMod\nIHACRES\nSIMHYD","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"Performance is expected to be similar to implementations in C and Fortran.","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"The Primer details the overarching concepts while the Examples provide a more \"hands-on\" overview.","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"","category":"page"},{"location":"","page":"Streamfall.jl Documentation","title":"Streamfall.jl Documentation","text":"<table align=\"center\">\n  <tr>\n    <th>Model</th>\n    <th>Full name</th>\n    <th>Reference</th>\n  </tr>\n  <tr>\n    <td>GR4J</td>\n    <td>modèle du Génie Rural à 4 paramètres Journalier</td>\n    <td>\n    Perrin, C., Michel, C., Andréassian, V., 2003.\n    Improvement of a parsimonious model for streamflow simulation.\n    Journal of Hydrology 279, 275-289.\n    https://doi.org/10.1016/S0022-1694(03)00225-7\n    </td>\n  </tr>\n  <tr>\n    <td>HyMod</td>\n    <td>HYdrological MODel</td>\n    <td>\n    Wagener, T., Boyle, D. P., Lees, M. J., Wheater, H. S., Gupta, H. V.,\n    and Sorooshian, S.: A framework for development and applica-\n    tion of hydrological models, Hydrol. Earth Syst. Sci., 5, 13–26,\n    doi:10.5194/hess-5-13-2001, 2001.\n    </td>\n  </tr>\n  <tr>\n    <td>IHACRES</td>\n    <td>Identification of unit Hydrographs And Component flows from Rainfall, Evaporation and Streamflow</td>\n    <td>\n    Croke, B.F.W., Jakeman, A.J. 2004\n    A catchment moisture deficit module for the IHACRES rainfall-runoff model,\n    Environmental Modelling & Software, 19(1), pp. 1–5.\n    doi: 10.1016/j.envsoft.2003.09.001\n    </td>\n  </tr>\n  <tr>\n    <td>SIMHYD</td>\n    <td>-</td>\n    <td>\n    Chiew, F. H. S., Peel, M. C., Western, A. W., Singh, V. P., & Frevert, D. (2002). Application and testing of the simple rainfall-runoff model SIMHYD. Mathematical models of small watershed hydrology and applications, 335-367.\n    </td>\n  </tr>\n</table>","category":"page"}]
}
